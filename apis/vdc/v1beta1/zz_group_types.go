/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupObservation struct {

	// More detailed error message when VDC group has error status
	// More detailed error message when VDC group has error status
	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message,omitempty"`

	// The VDC group ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Status whether local egress is enabled for a universal router belonging to a universal VDC group.
	// Status whether local egress is enabled for a universal router belonging to a universal VDC group
	LocalEgress *bool `json:"localEgress,omitempty" tf:"local_egress,omitempty"`

	// ID of used network pool.
	// ID of used network pool
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`

	// The network provider’s universal id that is backing the universal network pool.
	// The network provider’s universal id that is backing the universal network pool
	NetworkPoolUniversalID *string `json:"networkPoolUniversalId,omitempty" tf:"network_pool_universal_id,omitempty"`

	// Defines the networking provider backing the VDC group.
	// Defines the networking provider backing the VDC Group
	NetworkProviderType *string `json:"networkProviderType,omitempty" tf:"network_provider_type,omitempty"`

	// A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
	// The list of organization VDCs that are participating in this group
	ParticipatingOrgVdcs []ParticipatingOrgVdcsObservation `json:"participatingOrgVdcs,omitempty" tf:"participating_org_vdcs,omitempty"`

	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED')
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Defines the group as LOCAL or UNIVERSAL.
	// Defines the group as LOCAL or UNIVERSAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// True means that a VDC group router has been created.
	// True means that a VDC group router has been created
	UniversalNetworkingEnabled *bool `json:"universalNetworkingEnabled,omitempty" tf:"universal_networking_enabled,omitempty"`
}

type GroupParameters struct {

	// Whether this security policy is enabled. dfw_enabled must be true.
	// Default Policy Status
	// +kubebuilder:validation:Optional
	DefaultPolicyStatus *bool `json:"defaultPolicyStatus,omitempty" tf:"default_policy_status,omitempty"`

	// VDC group description
	// VDC group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether Distributed Firewall is enabled for this VDC group.
	// Distributed firewall status
	// +kubebuilder:validation:Optional
	DfwEnabled *bool `json:"dfwEnabled,omitempty" tf:"dfw_enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The list of organization VDCs that are participating in this group. Note: starting_vdc_id isn't automatically included in this list.
	// Participating VDC IDs
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/org/v1beta1.Vdc
	// +kubebuilder:validation:Optional
	ParticipatingVdcIds []*string `json:"participatingVdcIds,omitempty" tf:"participating_vdc_ids,omitempty"`

	// References to Vdc in org to populate participatingVdcIds.
	// +kubebuilder:validation:Optional
	ParticipatingVdcIdsRefs []v1.Reference `json:"participatingVdcIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Vdc in org to populate participatingVdcIds.
	// +kubebuilder:validation:Optional
	ParticipatingVdcIdsSelector *v1.Selector `json:"participatingVdcIdsSelector,omitempty" tf:"-"`

	// With selecting a starting VDC you will be able to create a group in which this VDC can participate. Note: starting_vdc_id must be included in participating_vdc_ids to participate in this group.
	// Starting VDC ID
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/org/v1beta1.Vdc
	// +kubebuilder:validation:Optional
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`

	// Reference to a Vdc in org to populate startingVdcId.
	// +kubebuilder:validation:Optional
	StartingVdcIDRef *v1.Reference `json:"startingVdcIdRef,omitempty" tf:"-"`

	// Selector for a Vdc in org to populate startingVdcId.
	// +kubebuilder:validation:Optional
	StartingVdcIDSelector *v1.Selector `json:"startingVdcIdSelector,omitempty" tf:"-"`
}

type ParticipatingOrgVdcsObservation struct {

	// Represents the fault domain of a given organization VDC.
	FaultDomainTag *string `json:"faultDomainTag,omitempty" tf:"fault_domain_tag,omitempty"`

	// Specifies whether the VDC is local to this VCD site.
	IsRemoteOrg *bool `json:"isRemoteOrg,omitempty" tf:"is_remote_org,omitempty"`

	// Specifies the network provider scope of the VDC.
	NetworkProviderScope *string `json:"networkProviderScope,omitempty" tf:"network_provider_scope,omitempty"`

	// Organization ID.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Organization name.
	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	// Site ID.
	SiteID *string `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// Site name.
	SiteName *string `json:"siteName,omitempty" tf:"site_name,omitempty"`

	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// VDC ID.
	VdcID *string `json:"vdcId,omitempty" tf:"vdc_id,omitempty"`

	// VDC name.
	VdcName *string `json:"vdcName,omitempty" tf:"vdc_name,omitempty"`
}

type ParticipatingOrgVdcsParameters struct {
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupParameters `json:"forProvider"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Group is the Schema for the Groups API. Provides a VDC group resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupSpec   `json:"spec"`
	Status            GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
