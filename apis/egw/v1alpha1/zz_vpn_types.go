/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LocalSubnetsObservation struct {
}

type LocalSubnetsParameters struct {

	// Gateway of the local subnet
	// +kubebuilder:validation:Required
	LocalSubnetGateway *string `json:"localSubnetGateway" tf:"local_subnet_gateway,omitempty"`

	// Subnet mask of the local subnet
	// +kubebuilder:validation:Required
	LocalSubnetMask *string `json:"localSubnetMask" tf:"local_subnet_mask,omitempty"`

	// Name of the local subnet
	// +kubebuilder:validation:Required
	LocalSubnetName *string `json:"localSubnetName" tf:"local_subnet_name,omitempty"`
}

type PeerSubnetsObservation struct {
}

type PeerSubnetsParameters struct {

	// Gateway of the peer subnet
	// +kubebuilder:validation:Required
	PeerSubnetGateway *string `json:"peerSubnetGateway" tf:"peer_subnet_gateway,omitempty"`

	// Subnet mask of the peer subnet
	// +kubebuilder:validation:Required
	PeerSubnetMask *string `json:"peerSubnetMask" tf:"peer_subnet_mask,omitempty"`

	// Name of the peer subnet
	// +kubebuilder:validation:Required
	PeerSubnetName *string `json:"peerSubnetName" tf:"peer_subnet_name,omitempty"`
}

type VPNObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPNParameters struct {

	// A description for the VPN
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which to apply the Firewall Rules
	// +kubebuilder:validation:Required
	EdgeGateway *string `json:"edgeGateway" tf:"edge_gateway,omitempty"`

	// - E.g. AES256
	// +kubebuilder:validation:Required
	EncryptionProtocol *string `json:"encryptionProtocol" tf:"encryption_protocol,omitempty"`

	// - Local ID
	// +kubebuilder:validation:Required
	LocalID *string `json:"localId" tf:"local_id,omitempty"`

	// - Local IP Address
	// +kubebuilder:validation:Required
	LocalIPAddress *string `json:"localIpAddress" tf:"local_ip_address,omitempty"`

	// - List of Local Subnets see Local Subnets below for details.
	// +kubebuilder:validation:Optional
	LocalSubnets []LocalSubnetsParameters `json:"localSubnets,omitempty" tf:"local_subnets,omitempty"`

	// - The MTU setting
	// +kubebuilder:validation:Required
	Mtu *float64 `json:"mtu" tf:"mtu,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// - Peer ID
	// +kubebuilder:validation:Required
	PeerID *string `json:"peerId" tf:"peer_id,omitempty"`

	// - Peer IP Address
	// +kubebuilder:validation:Required
	PeerIPAddress *string `json:"peerIpAddress" tf:"peer_ip_address,omitempty"`

	// - List of Peer Subnets see Peer Subnets below for details.
	// +kubebuilder:validation:Optional
	PeerSubnets []PeerSubnetsParameters `json:"peerSubnets,omitempty" tf:"peer_subnets,omitempty"`

	// - Shared Secret
	// +kubebuilder:validation:Required
	SharedSecretSecretRef v1.SecretKeySelector `json:"sharedSecretSecretRef" tf:"-"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// VPNSpec defines the desired state of VPN
type VPNSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNParameters `json:"forProvider"`
}

// VPNStatus defines the observed state of VPN.
type VPNStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPN is the Schema for the VPNs API. Provides a VMware Cloud Director IPsec VPN. This can be used to create, modify, and delete VPN settings and rules.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VPN struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNSpec   `json:"spec"`
	Status            VPNStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNList contains a list of VPNs
type VPNList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPN `json:"items"`
}

// Repository type metadata.
var (
	VPN_Kind             = "VPN"
	VPN_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPN_Kind}.String()
	VPN_KindAPIVersion   = VPN_Kind + "." + CRDGroupVersion.String()
	VPN_GroupVersionKind = CRDGroupVersion.WithKind(VPN_Kind)
)

func init() {
	SchemeBuilder.Register(&VPN{}, &VPNList{})
}
