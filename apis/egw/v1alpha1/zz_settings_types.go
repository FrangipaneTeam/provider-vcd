/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SettingsParameters struct {

	// The edge gateway ID.
	// ID of the edge gateway. Required when 'edge_gateway_name' is not set
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Default firewall rule (last in the processing order) action.
	// One of accept or deny. Default deny.
	// 'accept' or 'deny'. Default 'deny'
	// +kubebuilder:validation:Optional
	FwDefaultRuleAction *string `json:"fwDefaultRuleAction,omitempty" tf:"fw_default_rule_action,omitempty"`

	// Enable default firewall rule (last in the processing
	// order) logging. Default false.
	// Enable logging for default rule. Default 'false'
	// +kubebuilder:validation:Optional
	FwDefaultRuleLoggingEnabled *bool `json:"fwDefaultRuleLoggingEnabled,omitempty" tf:"fw_default_rule_logging_enabled,omitempty"`

	// Enable firewall. Default true.
	// Enable firewall. Default 'true'
	// +kubebuilder:validation:Optional
	FwEnabled *bool `json:"fwEnabled,omitempty" tf:"fw_enabled,omitempty"`

	// Enable to configure the load balancer.
	// Enable load balancer acceleration. (Disabled by default)
	// +kubebuilder:validation:Optional
	LBAccelerationEnabled *bool `json:"lbAccelerationEnabled,omitempty" tf:"lb_acceleration_enabled,omitempty"`

	// Enable load balancing. Default is false.
	// Enable load balancing. (Disabled by default)
	// +kubebuilder:validation:Optional
	LBEnabled *bool `json:"lbEnabled,omitempty" tf:"lb_enabled,omitempty"`

	// Enables the edge gateway load balancer to collect traffic logs.
	// Default is false. Note: only System administrators can change this property. It is ignored by API for Org users.
	// Enable load balancer logging. (Disabled by default)
	// +kubebuilder:validation:Optional
	LBLoggingEnabled *bool `json:"lbLoggingEnabled,omitempty" tf:"lb_logging_enabled,omitempty"`

	// Choose the severity of events to be logged. One of emergency,
	// alert, critical, error, warning, notice, info, debug. Note: only System administrators can change this property. It is ignored by API for Org users.
	// Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
	// +kubebuilder:validation:Optional
	LBLoglevel *string `json:"lbLoglevel,omitempty" tf:"lb_loglevel,omitempty"`

	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC that owns the edge gateway. Optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// SettingsSpec defines the desired state of Settings
type SettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsParameters `json:"forProvider"`
}

// SettingsStatus defines the observed state of Settings.
type SettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Settings is the Schema for the Settingss API. Provides a VMware Cloud Director edge gateway global settings. This can be used to update global edge gateways settings related to firewall and load balancing.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Settings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingsSpec   `json:"spec"`
	Status            SettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsList contains a list of Settingss
type SettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Settings `json:"items"`
}

// Repository type metadata.
var (
	Settings_Kind             = "Settings"
	Settings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Settings_Kind}.String()
	Settings_KindAPIVersion   = Settings_Kind + "." + CRDGroupVersion.String()
	Settings_GroupVersionKind = CRDGroupVersion.WithKind(Settings_Kind)
)

func init() {
	SchemeBuilder.Register(&Settings{}, &SettingsList{})
}
