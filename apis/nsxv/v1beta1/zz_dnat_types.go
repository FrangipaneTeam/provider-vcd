/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnatObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DnatParameters struct {

	// Free text description.
	// NAT rule description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which to apply the DNAT rule.
	// Edge gateway name in which NAT Rule is located
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1.EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Reference to a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewayRef *v1.Reference `json:"edgeGatewayRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewaySelector *v1.Selector `json:"edgeGatewaySelector,omitempty" tf:"-"`

	// Defines if the rule is enabaled. Default true.
	// Whether the rule should be enabled. Default 'true'
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Only when protocol is set to icmp. One of any,
	// address-mask-request, address-mask-reply, destination-unreachable, echo-request,
	// echo-reply, parameter-problem, redirect, router-advertisement, router-solicitation,
	// source-quench, time-exceeded, timestamp-request, timestamp-reply. Default any
	// ICMP type. Only supported when protocol is ICMP. One of `any`, `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`, `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`, `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
	// +kubebuilder:validation:Optional
	IcmpType *string `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// Defines if the logging for this rule is enabaled. Default false.
	// Whether logging should be enabled for this rule. Default 'false'
	// +kubebuilder:validation:Optional
	LoggingEnabled *bool `json:"loggingEnabled,omitempty" tf:"logging_enabled,omitempty"`

	// The name of the network on which to apply the DNAT rule.
	// Org or external network name
	// +kubebuilder:validation:Required
	NetworkName *string `json:"networkName" tf:"network_name,omitempty"`

	// Type of the network on which to apply the DNAT rule. Possible values
	// org or ext.
	// Network type. One of 'ext', 'org'
	// +kubebuilder:validation:Required
	NetworkType *string `json:"networkType" tf:"network_type,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// IP address, range or subnet. This address must be the public IP
	// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
	// inspected, this IP address or range would be those that appear as the destination IP address of the
	// packet. These packet destination addresses are the ones translated by this DNAT rule.
	// Original address or address range. This is the the destination address for DNAT rules.
	// +kubebuilder:validation:Required
	OriginalAddress *string `json:"originalAddress" tf:"original_address,omitempty"`

	// Select the port or port range that the incoming traffic uses on the
	// edge gateway to connect to the internal network on which the virtual machines are connected. This
	// selection is not available when the Protocol is set to icmp or any. Default any.
	// Original port. This is the destination port for DNAT rules
	// +kubebuilder:validation:Optional
	OriginalPort *string `json:"originalPort,omitempty" tf:"original_port,omitempty"`

	// Select the protocol to which the rule applies. One of tcp, udp,
	// icmp, any. Default any
	// protocols, select Any.
	// Protocol. Such as 'tcp', 'udp', 'icmp', 'any'
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	// Optional. Allows to set custom rule tag
	// +kubebuilder:validation:Optional
	RuleTag *float64 `json:"ruleTag,omitempty" tf:"rule_tag,omitempty"`

	// Possible values - user, internal_high.
	// Read only. Possible values 'user', 'internal_high'
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// IP address, range or subnet. IP addresses to which destination
	// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
	// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
	// external network.
	// Translated address or address range
	// +kubebuilder:validation:Optional
	TranslatedAddress *string `json:"translatedAddress,omitempty" tf:"translated_address,omitempty"`

	// Select the port or port range that inbound traffic is connecting
	// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
	// rule is translating for the packets inbound to the virtual machines.
	// Translated port
	// +kubebuilder:validation:Optional
	TranslatedPort *string `json:"translatedPort,omitempty" tf:"translated_port,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// DnatSpec defines the desired state of Dnat
type DnatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnatParameters `json:"forProvider"`
}

// DnatStatus defines the observed state of Dnat.
type DnatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Dnat is the Schema for the Dnats API. Provides a VMware Cloud Director DNAT resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete destination NATs to map an external IP/port to an internal IP/port.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Dnat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnatSpec   `json:"spec"`
	Status            DnatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnatList contains a list of Dnats
type DnatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dnat `json:"items"`
}

// Repository type metadata.
var (
	Dnat_Kind             = "Dnat"
	Dnat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dnat_Kind}.String()
	Dnat_KindAPIVersion   = Dnat_Kind + "." + CRDGroupVersion.String()
	Dnat_GroupVersionKind = CRDGroupVersion.WithKind(Dnat_Kind)
)

func init() {
	SchemeBuilder.Register(&Dnat{}, &DnatList{})
}
