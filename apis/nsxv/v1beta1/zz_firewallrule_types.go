/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DestinationObservation struct {
}

type DestinationParameters struct {

	// When the toggle exclusion is selected, the rule is applied to
	// traffic on all sources except for the locations you excluded. When the toggle exclusion is not
	// selected, the rule applies to traffic you specified. Default false. This
	// example uses it.
	// Rule is applied to traffic going to any destinations except for the excluded destination. Default 'false'
	// +kubebuilder:validation:Optional
	Exclude *bool `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// A set of with either three keywords vse (UI names it as any), internal, external or an org network name. It automatically looks up vNic in the backend.
	// 'vse', 'internal', 'external' or network name
	// +kubebuilder:validation:Optional
	GatewayInterfaces []*string `json:"gatewayInterfaces,omitempty" tf:"gateway_interfaces,omitempty"`

	// A set of IP addresses, CIDRs or ranges. A keyword any is also
	// accepted as a parameter.
	// IP address, CIDR, an IP range, or the keyword 'any'
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// A set of existing IP set names (either created manually or configured using vcd_nsxv_ip_set resource)
	// Set of IP set names
	// +kubebuilder:validation:Optional
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// A set of org network names.
	// Set of org network names
	// +kubebuilder:validation:Optional
	OrgNetworks []*string `json:"orgNetworks,omitempty" tf:"org_networks,omitempty"`

	// A set of .id fields of vcd_vapp_vm resources.
	// Set of VM IDs
	// +kubebuilder:validation:Optional
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type FirewallRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FirewallRuleParameters struct {

	// This can be used to alter default rule placement order. By default
	// every rule is appended to the end of firewall rule list. When a value of another rule is set - this
	// rule will be placed above the specified rule.
	// This firewall rule will be inserted above the referred one
	// +kubebuilder:validation:Optional
	AboveRuleID *string `json:"aboveRuleId,omitempty" tf:"above_rule_id,omitempty"`

	// Defines if the rule is set to accept or deny traffic. Default accept
	// 'accept' or 'deny'. Default 'accept'
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Exactly one block to define source criteria for firewall. See
	// Endpoint and example for usage details.
	// +kubebuilder:validation:Required
	Destination []DestinationParameters `json:"destination" tf:"destination,omitempty"`

	// The name of the edge gateway on which to apply the firewall rule.
	// Edge gateway name in which Firewall Rule is located
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1.EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Reference to a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewayRef *v1.Reference `json:"edgeGatewayRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewaySelector *v1.Selector `json:"edgeGatewaySelector,omitempty" tf:"-"`

	// Defines if the rule is enabaled. Default true.
	// Whether the rule should be enabled. Default 'true'
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Defines if the logging for this rule is enabaled. Default false.
	// Whether logging should be enabled for this rule. Default 'false'
	// +kubebuilder:validation:Optional
	LoggingEnabled *bool `json:"loggingEnabled,omitempty" tf:"logging_enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	// Optional. Allows to set custom rule tag
	// +kubebuilder:validation:Optional
	RuleTag *float64 `json:"ruleTag,omitempty" tf:"rule_tag,omitempty"`

	// Possible values - user, internal_high.
	// Read only. Possible values 'user', 'internal_high'
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// One or more blocks to define protocol and port details. Use multiple blocks
	// if you want to define multiple port/protocol combinations for the same rule. See
	// Service and example for usage details.
	// +kubebuilder:validation:Required
	Service []ServiceParameters `json:"service" tf:"service,omitempty"`

	// Exactly one block to define source criteria for firewall. See
	// Endpoint and example for usage details.
	// +kubebuilder:validation:Required
	Source []SourceParameters `json:"source" tf:"source,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type ServiceObservation struct {
}

type ServiceParameters struct {

	// Port number or range separated by - for port number. Default 'any'.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// One of any, tcp, udp, icmp to apply.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Port number or range separated by - for port number. Default 'any'.
	// +kubebuilder:validation:Optional
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

type SourceObservation struct {
}

type SourceParameters struct {

	// When the toggle exclusion is selected, the rule is applied to
	// traffic on all sources except for the locations you excluded. When the toggle exclusion is not
	// selected, the rule applies to traffic you specified. Default false. This
	// example uses it.
	// Rule is applied to traffic coming from all sources except for the excluded source. Default 'false'
	// +kubebuilder:validation:Optional
	Exclude *bool `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// A set of with either three keywords vse (UI names it as any), internal, external or an org network name. It automatically looks up vNic in the backend.
	// 'vse', 'internal', 'external' or network name
	// +kubebuilder:validation:Optional
	GatewayInterfaces []*string `json:"gatewayInterfaces,omitempty" tf:"gateway_interfaces,omitempty"`

	// A set of IP addresses, CIDRs or ranges. A keyword any is also
	// accepted as a parameter.
	// IP address, CIDR, an IP range, or the keyword 'any'
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// A set of existing IP set names (either created manually or configured using vcd_nsxv_ip_set resource)
	// Set of IP set names
	// +kubebuilder:validation:Optional
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// A set of org network names.
	// Set of org network names
	// +kubebuilder:validation:Optional
	OrgNetworks []*string `json:"orgNetworks,omitempty" tf:"org_networks,omitempty"`

	// A set of .id fields of vcd_vapp_vm resources.
	// Set of VM IDs
	// +kubebuilder:validation:Optional
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

// FirewallRuleSpec defines the desired state of FirewallRule
type FirewallRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallRuleParameters `json:"forProvider"`
}

// FirewallRuleStatus defines the observed state of FirewallRule.
type FirewallRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallRule is the Schema for the FirewallRules API. Provides a VMware Cloud Director firewall rule resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete firewall rules.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type FirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallRuleSpec   `json:"spec"`
	Status            FirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallRuleList contains a list of FirewallRules
type FirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallRule `json:"items"`
}

// Repository type metadata.
var (
	FirewallRule_Kind             = "FirewallRule"
	FirewallRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallRule_Kind}.String()
	FirewallRule_KindAPIVersion   = FirewallRule_Kind + "." + CRDGroupVersion.String()
	FirewallRule_GroupVersionKind = CRDGroupVersion.WithKind(FirewallRule_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallRule{}, &FirewallRuleList{})
}
