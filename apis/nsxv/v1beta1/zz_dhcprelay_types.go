/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DHCPRelayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DHCPRelayParameters struct {

	// A set of domain names.
	// A set of IP domain names of DHCP servers
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// The name of the edge gateway on which DHCP relay is to be configured.
	// Edge gateway name for DHCP relay settings
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1.EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Reference to a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewayRef *v1.Reference `json:"edgeGatewayRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewaySelector *v1.Selector `json:"edgeGatewaySelector,omitempty" tf:"-"`

	// A set of IP addresses.
	// A set of IP address of DHCP servers
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// A set of IP set names.
	// A set of IP set names which consist DHCP servers
	// +crossplane:generate:reference:type=IPSet
	// +kubebuilder:validation:Optional
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// References to IPSet to populate ipSets.
	// +kubebuilder:validation:Optional
	IPSetsRefs []v1.Reference `json:"ipSetsRefs,omitempty" tf:"-"`

	// Selector for a list of IPSet to populate ipSets.
	// +kubebuilder:validation:Optional
	IPSetsSelector *v1.Selector `json:"ipSetsSelector,omitempty" tf:"-"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks to define Org network and optional IP address of
	// edge gateway interfaces from which DHCP messages are to be relayed to the external DHCP relay
	// server(s). See Relay Agent and example for usage details.
	// +kubebuilder:validation:Required
	RelayAgent []RelayAgentParameters `json:"relayAgent" tf:"relay_agent,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type RelayAgentObservation struct {
}

type RelayAgentParameters struct {

	// IP address on edge gateway to be used for relaying messages.
	// Primary address of edge gateway interface will be picked if not specified.
	// Optional gateway IP address of org network which is to be used for relaying DHCP message to specified servers
	// +kubebuilder:validation:Optional
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// An existing Org network name from which DHCP messages are to be relayed.
	// Org network which is to be used for relaying DHCP message to specified servers
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/network/v1beta1.Routed
	// +kubebuilder:validation:Optional
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	// Reference to a Routed in network to populate networkName.
	// +kubebuilder:validation:Optional
	NetworkNameRef *v1.Reference `json:"networkNameRef,omitempty" tf:"-"`

	// Selector for a Routed in network to populate networkName.
	// +kubebuilder:validation:Optional
	NetworkNameSelector *v1.Selector `json:"networkNameSelector,omitempty" tf:"-"`
}

// DHCPRelaySpec defines the desired state of DHCPRelay
type DHCPRelaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DHCPRelayParameters `json:"forProvider"`
}

// DHCPRelayStatus defines the observed state of DHCPRelay.
type DHCPRelayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DHCPRelayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DHCPRelay is the Schema for the DHCPRelays API. Provides an NSX edge gateway DHCP relay configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type DHCPRelay struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DHCPRelaySpec   `json:"spec"`
	Status            DHCPRelayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DHCPRelayList contains a list of DHCPRelays
type DHCPRelayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DHCPRelay `json:"items"`
}

// Repository type metadata.
var (
	DHCPRelay_Kind             = "DHCPRelay"
	DHCPRelay_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DHCPRelay_Kind}.String()
	DHCPRelay_KindAPIVersion   = DHCPRelay_Kind + "." + CRDGroupVersion.String()
	DHCPRelay_GroupVersionKind = CRDGroupVersion.WithKind(DHCPRelay_Kind)
)

func init() {
	SchemeBuilder.Register(&DHCPRelay{}, &DHCPRelayList{})
}
