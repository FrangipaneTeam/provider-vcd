/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta1 "github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1"
	v1beta11 "github.com/FrangipaneTeam/provider-vcd/apis/network/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DHCPRelay.
func (mg *DHCPRelay) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.IPSets),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.IPSetsRefs,
		Selector:      mg.Spec.ForProvider.IPSetsSelector,
		To: reference.To{
			List:    &IPSetList{},
			Managed: &IPSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPSets")
	}
	mg.Spec.ForProvider.IPSets = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.IPSetsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RelayAgent); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RelayAgent[i3].NetworkName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RelayAgent[i3].NetworkNameRef,
			Selector:     mg.Spec.ForProvider.RelayAgent[i3].NetworkNameSelector,
			To: reference.To{
				List:    &v1beta11.RoutedList{},
				Managed: &v1beta11.Routed{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RelayAgent[i3].NetworkName")
		}
		mg.Spec.ForProvider.RelayAgent[i3].NetworkName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RelayAgent[i3].NetworkNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Dnat.
func (mg *Dnat) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FirewallRule.
func (mg *FirewallRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Snat.
func (mg *Snat) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}
