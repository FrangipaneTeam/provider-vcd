/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppRuleObservation struct {

	// The NSX ID of the load balancer application rule
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppRuleParameters struct {

	// The name of the edge gateway on which the application rule is to be created
	// Edge gateway name in which the LB Application Rule is located
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1.EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Reference to a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewayRef *v1.Reference `json:"edgeGatewayRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewaySelector *v1.Selector `json:"edgeGatewaySelector,omitempty" tf:"-"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A multiline application rule script. Note: For information on
	// the application rule syntax, see more in [VMware Cloud Director documentation]
	// (https://docs.vmware.com/en/vCloud-Director/9.7/com.vmware.vcloud.tenantportal.doc/GUID-AFF9F70F-85C9-4053-BA69-F2B062F34C7F.html)
	// The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
	// +kubebuilder:validation:Required
	Script *string `json:"script" tf:"script,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// AppRuleSpec defines the desired state of AppRule
type AppRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppRuleParameters `json:"forProvider"`
}

// AppRuleStatus defines the observed state of AppRule.
type AppRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppRule is the Schema for the AppRules API. Provides an NSX edge gateway load balancer application rule resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type AppRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppRuleSpec   `json:"spec"`
	Status            AppRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppRuleList contains a list of AppRules
type AppRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppRule `json:"items"`
}

// Repository type metadata.
var (
	AppRule_Kind             = "AppRule"
	AppRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppRule_Kind}.String()
	AppRule_KindAPIVersion   = AppRule_Kind + "." + CRDGroupVersion.String()
	AppRule_GroupVersionKind = CRDGroupVersion.WithKind(AppRule_Kind)
)

func init() {
	SchemeBuilder.Register(&AppRule{}, &AppRuleList{})
}
