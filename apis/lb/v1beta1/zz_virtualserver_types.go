/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualServerObservation struct {

	// The NSX ID of the load balancer virtual server
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VirtualServerParameters struct {

	// Application profile ID to be associated with the virtual server
	// Application profile ID to be associated with the virtual server
	// +crossplane:generate:reference:type=AppProfile
	// +kubebuilder:validation:Optional
	AppProfileID *string `json:"appProfileId,omitempty" tf:"app_profile_id,omitempty"`

	// Reference to a AppProfile to populate appProfileId.
	// +kubebuilder:validation:Optional
	AppProfileIDRef *v1.Reference `json:"appProfileIdRef,omitempty" tf:"-"`

	// Selector for a AppProfile to populate appProfileId.
	// +kubebuilder:validation:Optional
	AppProfileIDSelector *v1.Selector `json:"appProfileIdSelector,omitempty" tf:"-"`

	// List of attached application rule IDs
	// List of attached application rule IDs
	// +crossplane:generate:reference:type=AppRule
	// +kubebuilder:validation:Optional
	AppRuleIds []*string `json:"appRuleIds,omitempty" tf:"app_rule_ids,omitempty"`

	// References to AppRule to populate appRuleIds.
	// +kubebuilder:validation:Optional
	AppRuleIdsRefs []v1.Reference `json:"appRuleIdsRefs,omitempty" tf:"-"`

	// Selector for a list of AppRule to populate appRuleIds.
	// +kubebuilder:validation:Optional
	AppRuleIdsSelector *v1.Selector `json:"appRuleIdsSelector,omitempty" tf:"-"`

	// Maximum concurrent connections that the virtual server can process
	// Maximum concurrent connections that the virtual server can process
	// +kubebuilder:validation:Optional
	ConnectionLimit *float64 `json:"connectionLimit,omitempty" tf:"connection_limit,omitempty"`

	// Maximum incoming new connection requests per second
	// Maximum incoming new connection requests per second
	// +kubebuilder:validation:Optional
	ConnectionRateLimit *float64 `json:"connectionRateLimit,omitempty" tf:"connection_rate_limit,omitempty"`

	// Virtual server description
	// Virtual Server description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the virtual server is to be
	// created
	// Edge gateway name in which the LB Virtual Server is located
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1.EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Reference to a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewayRef *v1.Reference `json:"edgeGatewayRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewaySelector *v1.Selector `json:"edgeGatewaySelector,omitempty" tf:"-"`

	// Defines if the virtual server uses acceleration. Default
	// false
	// Enable virtual server acceleration
	// +kubebuilder:validation:Optional
	EnableAcceleration *bool `json:"enableAcceleration,omitempty" tf:"enable_acceleration,omitempty"`

	// Defines if the virtual server is enabled. Default true
	// Defines if the virtual server is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Set the IP address that the load balancer listens on
	// IP address that the load balancer listens on
	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The port number that the load balancer listens on
	// Port number that the load balancer listens on
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Select the protocol that the virtual server accepts. One of tcp, udp,
	// http, or https Note: You must select the same protocol used by the selected
	// Application Profile
	// Protocol that the virtual server accepts
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// The server pool that the load balancer will use
	// The server pool that the load balancer will use
	// +crossplane:generate:reference:type=ServerPool
	// +kubebuilder:validation:Optional
	ServerPoolID *string `json:"serverPoolId,omitempty" tf:"server_pool_id,omitempty"`

	// Reference to a ServerPool to populate serverPoolId.
	// +kubebuilder:validation:Optional
	ServerPoolIDRef *v1.Reference `json:"serverPoolIdRef,omitempty" tf:"-"`

	// Selector for a ServerPool to populate serverPoolId.
	// +kubebuilder:validation:Optional
	ServerPoolIDSelector *v1.Selector `json:"serverPoolIdSelector,omitempty" tf:"-"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// VirtualServerSpec defines the desired state of VirtualServer
type VirtualServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualServerParameters `json:"forProvider"`
}

// VirtualServerStatus defines the observed state of VirtualServer.
type VirtualServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualServer is the Schema for the VirtualServers API. Provides an NSX edge gateway load balancer virtual server resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VirtualServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualServerSpec   `json:"spec"`
	Status            VirtualServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualServerList contains a list of VirtualServers
type VirtualServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualServer `json:"items"`
}

// Repository type metadata.
var (
	VirtualServer_Kind             = "VirtualServer"
	VirtualServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualServer_Kind}.String()
	VirtualServer_KindAPIVersion   = VirtualServer_Kind + "." + CRDGroupVersion.String()
	VirtualServer_GroupVersionKind = CRDGroupVersion.WithKind(VirtualServer_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualServer{}, &VirtualServerList{})
}
