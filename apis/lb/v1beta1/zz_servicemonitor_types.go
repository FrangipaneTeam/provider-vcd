/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceMonitorObservation struct {

	// The NSX ID of the load balancer service monitor
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceMonitorParameters struct {

	// The name of the edge gateway on which the service monitor is to be created
	// Edge gateway name in which the LB Service Monitor is located
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1.EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Reference to a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewayRef *v1.Reference `json:"edgeGatewayRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway in edgegateway to populate edgeGateway.
	// +kubebuilder:validation:Optional
	EdgeGatewaySelector *v1.Selector `json:"edgeGatewaySelector,omitempty" tf:"-"`

	// For types http and https. String that the monitor expects to match in the status line of
	// the HTTP or HTTPS response (for example, HTTP/1.1)
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	// +kubebuilder:validation:Optional
	Expected *string `json:"expected,omitempty" tf:"expected,omitempty"`

	// A map of advanced monitor parameters as key=value pairs (i.e. max-age=SECONDS, invert-regex)
	// Note: When you need a value of key only format just set value to empty string (i.e. linespan = "")
	// Advanced monitor parameters as key=value pairs
	// +kubebuilder:validation:Optional
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// Interval in seconds at which a server is to be monitored using the specified Method.
	// Defaults to 10
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Number of times the specified monitoring Method must fail sequentially before the server is
	// declared down. Defaults to 3
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down  (defaults to 3)
	// +kubebuilder:validation:Optional
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// For types http and https. Select http method to be used to detect server status. One of
	// OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// For types http,  https, and udp. The string to be matched in the response content.
	// Note: When expected is not matched, the monitor does not try to match the Receive content
	// String to be matched in the response content
	// +kubebuilder:validation:Optional
	Receive *string `json:"receive,omitempty" tf:"receive,omitempty"`

	// For types http,  https, and udp. The data to be sent.
	// Data to be sent
	// +kubebuilder:validation:Optional
	Send *string `json:"send,omitempty" tf:"send,omitempty"`

	// Maximum time in seconds within which a response from the server must be received. Defaults to 15
	// Maximum time in seconds within which a response from the server must be received  (defaults to 15)
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Select the way in which you want to send the health check request to the server â€” http, https,
	// tcp, icmp, or udp. Depending on the type selected, the remaining attributes are allowed or not
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// For types http and https. URL to be used in the server status request
	// URL to be used in the server status request
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// ServiceMonitorSpec defines the desired state of ServiceMonitor
type ServiceMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceMonitorParameters `json:"forProvider"`
}

// ServiceMonitorStatus defines the observed state of ServiceMonitor.
type ServiceMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceMonitor is the Schema for the ServiceMonitors API. Provides an NSX edge gateway load balancer service monitor resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ServiceMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceMonitorSpec   `json:"spec"`
	Status            ServiceMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceMonitorList contains a list of ServiceMonitors
type ServiceMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceMonitor `json:"items"`
}

// Repository type metadata.
var (
	ServiceMonitor_Kind             = "ServiceMonitor"
	ServiceMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceMonitor_Kind}.String()
	ServiceMonitor_KindAPIVersion   = ServiceMonitor_Kind + "." + CRDGroupVersion.String()
	ServiceMonitor_GroupVersionKind = CRDGroupVersion.WithKind(ServiceMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceMonitor{}, &ServiceMonitorList{})
}
