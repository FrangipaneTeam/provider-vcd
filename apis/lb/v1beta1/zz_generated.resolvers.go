/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta1 "github.com/FrangipaneTeam/provider-vcd/apis/edgegateway/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AppProfile.
func (mg *AppProfile) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AppRule.
func (mg *AppRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServerPool.
func (mg *ServerPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServiceMonitor.
func (mg *ServiceMonitor) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VirtualServer.
func (mg *VirtualServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppProfileID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AppProfileIDRef,
		Selector:     mg.Spec.ForProvider.AppProfileIDSelector,
		To: reference.To{
			List:    &AppProfileList{},
			Managed: &AppProfile{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppProfileID")
	}
	mg.Spec.ForProvider.AppProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppProfileIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.AppRuleIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.AppRuleIdsRefs,
		Selector:      mg.Spec.ForProvider.AppRuleIdsSelector,
		To: reference.To{
			List:    &AppRuleList{},
			Managed: &AppRule{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppRuleIds")
	}
	mg.Spec.ForProvider.AppRuleIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.AppRuleIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGateway),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewaySelector,
		To: reference.To{
			List:    &v1beta1.EdgeGatewayList{},
			Managed: &v1beta1.EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGateway")
	}
	mg.Spec.ForProvider.EdgeGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServerPoolIDRef,
		Selector:     mg.Spec.ForProvider.ServerPoolIDSelector,
		To: reference.To{
			List:    &ServerPoolList{},
			Managed: &ServerPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerPoolID")
	}
	mg.Spec.ForProvider.ServerPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerPoolIDRef = rsp.ResolvedReference

	return nil
}
