/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleObservation struct {

	// Key used for internationalization
	// Key used for internationalization
	BundleKey *string `json:"bundleKey,omitempty" tf:"bundle_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether this global role is read-only
	// Whether this global role is read-only
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type RoleParameters struct {

	// A description of the global role
	// Global role description
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// When true, publishes the global role to all tenants
	// When true, publishes the global role to all tenants
	// +kubebuilder:validation:Required
	PublishToAllTenants *bool `json:"publishToAllTenants" tf:"publish_to_all_tenants,omitempty"`

	// List of rights assigned to this role
	// list of rights assigned to this global role
	// +kubebuilder:validation:Optional
	Rights []*string `json:"rights,omitempty" tf:"rights,omitempty"`

	// List of tenants to which this global role gets published. Ignored if publish_to_all_tenants is true.
	// list of tenants to which this global role is published
	// +kubebuilder:validation:Optional
	Tenants []*string `json:"tenants,omitempty" tf:"tenants,omitempty"`
}

// RoleSpec defines the desired state of Role
type RoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleParameters `json:"forProvider"`
}

// RoleStatus defines the observed state of Role.
type RoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Role is the Schema for the Roles API. Provides a VMware Cloud Director global role. This can be used to create, modify, and delete global roles.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Role struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleSpec   `json:"spec"`
	Status            RoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleList contains a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Role `json:"items"`
}

// Repository type metadata.
var (
	Role_Kind             = "Role"
	Role_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Role_Kind}.String()
	Role_KindAPIVersion   = Role_Kind + "." + CRDGroupVersion.String()
	Role_GroupVersionKind = CRDGroupVersion.WithKind(Role_Kind)
)

func init() {
	SchemeBuilder.Register(&Role{}, &RoleList{})
}
