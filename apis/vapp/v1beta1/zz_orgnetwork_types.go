/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgNetworkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OrgNetworkParameters struct {

	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp
	// +kubebuilder:validation:Optional
	IsFenced *bool `json:"isFenced,omitempty" tf:"is_fenced,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when is_fenced is true.
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	// +kubebuilder:validation:Optional
	RetainIPMacEnabled *bool `json:"retainIpMacEnabled,omitempty" tf:"retain_ip_mac_enabled,omitempty"`

	// The vApp this network belongs to.
	// vApp network name
	// +kubebuilder:validation:Required
	VappName *string `json:"vappName" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// OrgNetworkSpec defines the desired state of OrgNetwork
type OrgNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgNetworkParameters `json:"forProvider"`
}

// OrgNetworkStatus defines the observed state of OrgNetwork.
type OrgNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrgNetwork is the Schema for the OrgNetworks API. Provides capability to attach an existing Org VDC Network to a vApp and toggle network features.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrgNetworkSpec   `json:"spec"`
	Status            OrgNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgNetworkList contains a list of OrgNetworks
type OrgNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgNetwork `json:"items"`
}

// Repository type metadata.
var (
	OrgNetwork_Kind             = "OrgNetwork"
	OrgNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgNetwork_Kind}.String()
	OrgNetwork_KindAPIVersion   = OrgNetwork_Kind + "." + CRDGroupVersion.String()
	OrgNetwork_GroupVersionKind = CRDGroupVersion.WithKind(OrgNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgNetwork{}, &OrgNetworkList{})
}
