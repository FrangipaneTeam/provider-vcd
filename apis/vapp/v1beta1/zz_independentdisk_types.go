/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndependentDiskObservation struct {

	// (Computed, v3.6+) IDs of VM which are using the disk
	// Set of VM IDs which are using the disk
	AttachedVMIds []*string `json:"attachedVmIds,omitempty" tf:"attached_vm_ids,omitempty"`

	// (Computed) Data store name. Readable only for system user.
	// Datastore name
	DatastoreName *string `json:"datastoreName,omitempty" tf:"datastore_name,omitempty"`

	// (Computed, v3.6+ and VCD 10.2+) True if disk is encrypted
	// True if disk is encrypted
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed) IOPS request for the created disk
	// IOPS request for the created disk
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// (Computed) True if the disk is already attached
	// True if the disk is already attached
	IsAttached *bool `json:"isAttached,omitempty" tf:"is_attached,omitempty"`

	// (Computed) The owner name of the disk
	// The owner name of the disk
	OwnerName *string `json:"ownerName,omitempty" tf:"owner_name,omitempty"`

	// (Computed, v3.6+ and VCD 10.2+) The UUID of this named disk's device backing
	// The UUID of this named disk's device backing
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IndependentDiskParameters struct {

	// Disk bus subtype. Values can be: buslogic, lsilogic, lsilogicsas, VirtualSCSI for SCSI, ahci for SATA and (v3.6+) nvmecontroller for NVME
	// +kubebuilder:validation:Optional
	BusSubType *string `json:"busSubType,omitempty" tf:"bus_sub_type,omitempty"`

	// Disk bus type. Values can be: IDE, SCSI, SATA, (v3.6+) NVME. Note When the disk type is IDE then VM is required to be powered off
	// +kubebuilder:validation:Optional
	BusType *string `json:"busType,omitempty" tf:"bus_type,omitempty"`

	// independent disk description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this independent disk.
	// Key value map of metadata to assign to this disk. Key and value can be any string.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Disk
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// This is the sharing type. Values can be: DiskSharing,ControllerSharing, or None
	// This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`
	// +kubebuilder:validation:Optional
	SharingType *string `json:"sharingType,omitempty" tf:"sharing_type,omitempty"`

	// Size of disk in MB.
	// size in MB
	// +kubebuilder:validation:Required
	SizeInMb *float64 `json:"sizeInMb" tf:"size_in_mb,omitempty"`

	// The name of storage profile where disk will be created
	// +kubebuilder:validation:Optional
	StorageProfile *string `json:"storageProfile,omitempty" tf:"storage_profile,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type MetadataEntryObservation struct {
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// IndependentDiskSpec defines the desired state of IndependentDisk
type IndependentDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndependentDiskParameters `json:"forProvider"`
}

// IndependentDiskStatus defines the observed state of IndependentDisk.
type IndependentDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndependentDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndependentDisk is the Schema for the IndependentDisks API. Provides a VMware Cloud Director independent disk resource. This can be used to create and delete independent disks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type IndependentDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndependentDiskSpec   `json:"spec"`
	Status            IndependentDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndependentDiskList contains a list of IndependentDisks
type IndependentDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndependentDisk `json:"items"`
}

// Repository type metadata.
var (
	IndependentDisk_Kind             = "IndependentDisk"
	IndependentDisk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndependentDisk_Kind}.String()
	IndependentDisk_KindAPIVersion   = IndependentDisk_Kind + "." + CRDGroupVersion.String()
	IndependentDisk_GroupVersionKind = CRDGroupVersion.WithKind(IndependentDisk_Kind)
)

func init() {
	SchemeBuilder.Register(&IndependentDisk{}, &IndependentDiskList{})
}
