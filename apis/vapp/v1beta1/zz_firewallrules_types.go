/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallRulesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FirewallRulesParameters struct {

	// Either 'allow' or 'drop'. Specifies what to do should none of the rules match.
	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	// +kubebuilder:validation:Required
	DefaultAction *string `json:"defaultAction" tf:"default_action,omitempty"`

	// Enable or disable firewall. Default is true.
	// Enable or disable firewall service. Default is `true`
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Flag to enable logging for default action. Default value is false.
	// Flag to enable logging for default action. Default value is false.
	// +kubebuilder:validation:Optional
	LogDefaultAction *bool `json:"logDefaultAction,omitempty" tf:"log_default_action,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Configures a firewall rule; see Rules below for details.
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The identifier of vApp.
	// vApp identifier
	// +crossplane:generate:reference:type=Vapp
	// +kubebuilder:validation:Optional
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// Reference to a Vapp to populate vappId.
	// +kubebuilder:validation:Optional
	VappIDRef *v1.Reference `json:"vappIdRef,omitempty" tf:"-"`

	// Selector for a Vapp to populate vappId.
	// +kubebuilder:validation:Optional
	VappIDSelector *v1.Selector `json:"vappIdSelector,omitempty" tf:"-"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// The destination IP to match. Either an IP address, IP range or any.
	// Destination IP address to which the rule applies. A value of `Any` matches any IP address.
	// +kubebuilder:validation:Optional
	DestinationIP *string `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// The destination port to match. Either a port number or any.
	// Destination port to which this rule applies.
	// +kubebuilder:validation:Optional
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Destination VM identifier.
	// Destination VM identifier
	// +kubebuilder:validation:Optional
	DestinationVMID *string `json:"destinationVmId,omitempty" tf:"destination_vm_id,omitempty"`

	// The value can be one of: assigned - assigned internal IP will be automatically chosen, NAT - NATed external IP will be automatically chosen.
	// The value can be one of: `assigned` - assigned internal IP will be automatically chosen. `NAT`: NATed external IP will be automatically chosen.
	// +kubebuilder:validation:Optional
	DestinationVMIPType *string `json:"destinationVmIpType,omitempty" tf:"destination_vm_ip_type,omitempty"`

	// VM NIC ID to which this rule applies.
	// Destination VM NIC ID to which this rule applies.
	// +kubebuilder:validation:Optional
	DestinationVMNicID *float64 `json:"destinationVmNicId,omitempty" tf:"destination_vm_nic_id,omitempty"`

	// true value will enable rule logging. Default is false.
	// 'true' value will enable rule logging. Default is false
	// +kubebuilder:validation:Optional
	EnableLogging *bool `json:"enableLogging,omitempty" tf:"enable_logging,omitempty"`

	// Enable or disable firewall. Default is true.
	// 'true' value will enable firewall rule
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Name of the firewall rule.
	// Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies what to do when this rule is matched. Either allow or drop.
	// One of: `drop` (drop packets that match the rule), `allow` (allow packets that match the rule to pass through the firewall)
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The protocol to match. One of tcp, udp, icmp, any or tcp&udp. Default is any.
	// Specify the protocols to which the rule should be applied. One of: `any`, `icmp`, `tcp`, `udp`, `tcp&udp`
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The source IP to match. Either an IP address, IP range or any.
	// Source IP address to which the rule applies. A value of `Any` matches any IP address.
	// +kubebuilder:validation:Optional
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// The source port to match. Either a port number or any.
	// Source port to which this rule applies.
	// +kubebuilder:validation:Optional
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`

	// Source VM identifier.
	// Source VM identifier
	// +kubebuilder:validation:Optional
	SourceVMID *string `json:"sourceVmId,omitempty" tf:"source_vm_id,omitempty"`

	// The value can be one of: assigned - assigned internal IP will be automatically chosen, NAT - NATed external IP will be automatically chosen.
	// The value can be one of: `assigned` - assigned internal IP will be automatically chosen. `NAT`: NATed external IP will be automatically chosen.
	// +kubebuilder:validation:Optional
	SourceVMIPType *string `json:"sourceVmIpType,omitempty" tf:"source_vm_ip_type,omitempty"`

	// VM NIC ID to which this rule applies.
	// Source VM NIC ID to which this rule applies.
	// +kubebuilder:validation:Optional
	SourceVMNicID *float64 `json:"sourceVmNicId,omitempty" tf:"source_vm_nic_id,omitempty"`
}

// FirewallRulesSpec defines the desired state of FirewallRules
type FirewallRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallRulesParameters `json:"forProvider"`
}

// FirewallRulesStatus defines the observed state of FirewallRules.
type FirewallRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallRules is the Schema for the FirewallRuless API. Provides a VMware Cloud Director vApp Firewall resource. This can be used to create, modify, and delete firewall settings and rules.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type FirewallRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallRulesSpec   `json:"spec"`
	Status            FirewallRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallRulesList contains a list of FirewallRuless
type FirewallRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallRules `json:"items"`
}

// Repository type metadata.
var (
	FirewallRules_Kind             = "FirewallRules"
	FirewallRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallRules_Kind}.String()
	FirewallRules_KindAPIVersion   = FirewallRules_Kind + "." + CRDGroupVersion.String()
	FirewallRules_GroupVersionKind = CRDGroupVersion.WithKind(FirewallRules_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallRules{}, &FirewallRulesList{})
}
