/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomizationObservation struct {
}

type CustomizationParameters struct {

	// Manually specify Administrator password.
	// Manually specify admin password
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// Allow local administrator password.
	// Allow local administrator password
	// +kubebuilder:validation:Optional
	AllowLocalAdminPassword *bool `json:"allowLocalAdminPassword,omitempty" tf:"allow_local_admin_password,omitempty"`

	// Auto generate password.
	// Auto generate password
	// +kubebuilder:validation:Optional
	AutoGeneratePassword *bool `json:"autoGeneratePassword,omitempty" tf:"auto_generate_password,omitempty"`

	// Allows to change SID (security identifier). Only applicable for Windows operating systems.
	// 'true' value will change SID. Applicable only for Windows VMs
	// +kubebuilder:validation:Optional
	ChangeSid *bool `json:"changeSid,omitempty" tf:"change_sid,omitempty"`

	// customization to work.
	// 'true' value will enable guest customization. It may occur on first boot or when 'force' is used
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Warning. true value will cause the VM to reboot on every apply operation. It never complains about a change in statefile. Can be used when guest customization
	// is needed after VM configuration (e.g. NIC change, customization options change, etc.) and then set back to false.
	// Note. It will not have effect when power_on field is set to false. See example workflow below.
	// 'true' value will cause the VM to reboot on every 'apply' operation
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// Provide initscript to be executed when customization is applied.
	// Script to run on initial boot or with customization.force=true set
	// +kubebuilder:validation:Optional
	Initscript *string `json:"initscript,omitempty" tf:"initscript,omitempty"`

	// Enable this VM to join a domain.
	// Enable this VM to join a domain
	// +kubebuilder:validation:Optional
	JoinDomain *bool `json:"joinDomain,omitempty" tf:"join_domain,omitempty"`

	// Organizational unit to be used for domain join.
	// Account organizational unit for domain name join
	// +kubebuilder:validation:Optional
	JoinDomainAccountOu *string `json:"joinDomainAccountOu,omitempty" tf:"join_domain_account_ou,omitempty"`

	// Set the domain name to override organization's domain name.
	// Custom domain name for join
	// +kubebuilder:validation:Optional
	JoinDomainName *string `json:"joinDomainName,omitempty" tf:"join_domain_name,omitempty"`

	// Password to be used for domain join.
	// Password for custom domain name join
	// +kubebuilder:validation:Optional
	JoinDomainPasswordSecretRef *v1.SecretKeySelector `json:"joinDomainPasswordSecretRef,omitempty" tf:"-"`

	// User to be used for domain join.
	// Username for custom domain name join
	// +kubebuilder:validation:Optional
	JoinDomainUser *string `json:"joinDomainUser,omitempty" tf:"join_domain_user,omitempty"`

	// Set to true to use organization's domain.
	// Use organization's domain for joining
	// +kubebuilder:validation:Optional
	JoinOrgDomain *bool `json:"joinOrgDomain,omitempty" tf:"join_org_domain,omitempty"`

	// Require Administrator to change password on first login.
	// Require Administrator to change password on first login
	// +kubebuilder:validation:Optional
	MustChangePasswordOnFirstLogin *bool `json:"mustChangePasswordOnFirstLogin,omitempty" tf:"must_change_password_on_first_login,omitempty"`

	// Number of times to log on automatically. 0 means disabled.
	// Number of times to log on automatically. '0' - disabled.
	// +kubebuilder:validation:Optional
	NumberOfAutoLogons *float64 `json:"numberOfAutoLogons,omitempty" tf:"number_of_auto_logons,omitempty"`
}

type DiskObservation struct {

	// (v2.7+) Independent disk size in MB.
	// The size of the disk in MB.
	SizeInMb *float64 `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`
}

type DiskParameters struct {

	// Bus number on which to place the disk controller
	// Bus number on which to place the disk controller
	// +kubebuilder:validation:Required
	BusNumber *string `json:"busNumber" tf:"bus_number,omitempty"`

	// A name for the VM, unique within the vApp
	// Independent disk name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Unit number (slot) on the bus specified by BusNumber.
	// Unit number (slot) on the bus specified by BusNumber
	// +kubebuilder:validation:Required
	UnitNumber *string `json:"unitNumber" tf:"unit_number,omitempty"`
}

type InternalDiskObservation struct {

	// Bus number on which to place the disk controller
	BusNumber *float64 `json:"busNumber,omitempty" tf:"bus_number,omitempty"`

	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
	// sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.5.0+ and
	// VCD 10.2.1+
	BusType *string `json:"busType,omitempty" tf:"bus_type,omitempty"`

	// (v2.7+) Specifies a unique identifier for this disk in the scope of the corresponding VM.
	DiskID *string `json:"diskId,omitempty" tf:"disk_id,omitempty"`

	// Specifies the IOPS for the disk. Default is 0.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The size of the disk in MB.
	SizeInMb *float64 `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`

	// Storage profile to override the default one
	StorageProfile *string `json:"storageProfile,omitempty" tf:"storage_profile,omitempty"`

	// (v2.7+) Specifies whether the disk storage is pre-allocated or allocated on demand.
	ThinProvisioned *bool `json:"thinProvisioned,omitempty" tf:"thin_provisioned,omitempty"`

	// Unit number (slot) on the bus specified by BusNumber.
	UnitNumber *float64 `json:"unitNumber,omitempty" tf:"unit_number,omitempty"`
}

type InternalDiskParameters struct {
}

type OverrideTemplateDiskObservation struct {
}

type OverrideTemplateDiskParameters struct {

	// Bus number on which to place the disk controller
	// The number of the SCSI or IDE controller itself.
	// +kubebuilder:validation:Required
	BusNumber *float64 `json:"busNumber" tf:"bus_number,omitempty"`

	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
	// sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.5.0+ and
	// VCD 10.2.1+
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme
	// +kubebuilder:validation:Required
	BusType *string `json:"busType" tf:"bus_type,omitempty"`

	// Specifies the IOPS for the disk. Default is 0.
	// Specifies the IOPS for the disk. Default is 0.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The size of the disk in MB.
	// The size of the disk in MB.
	// +kubebuilder:validation:Required
	SizeInMb *float64 `json:"sizeInMb" tf:"size_in_mb,omitempty"`

	// Storage profile to override the default one
	// Storage profile to override the VM default one
	// +kubebuilder:validation:Optional
	StorageProfile *string `json:"storageProfile,omitempty" tf:"storage_profile,omitempty"`

	// Unit number (slot) on the bus specified by BusNumber.
	// The device number on the SCSI or IDE controller of the disk.
	// +kubebuilder:validation:Required
	UnitNumber *float64 `json:"unitNumber" tf:"unit_number,omitempty"`
}

type VMMetadataEntryObservation struct {
}

type VMMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Network type, one of: none, vapp or org. none creates a NIC with no network attached. vapp requires name of existing vApp network (created with vcd_vapp_network). org requires attached vApp Org network name (attached with vcd_vapp_org_network).
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VMNetworkObservation struct {
}

type VMNetworkParameters struct {

	// Adapter type (names are case insensitive). Some known adapter types - VMXNET3,
	// E1000, E1000E, SRIOVETHERNETCARD, VMXNET2, PCNet32.
	// Network card adapter type. (e.g. 'E1000', 'E1000E', 'SRIOVETHERNETCARD', 'VMXNET3', 'PCNet32')
	// +kubebuilder:validation:Optional
	AdapterType *string `json:"adapterType,omitempty" tf:"adapter_type,omitempty"`

	// It defines if NIC is connected or not. Network with ip_allocation_mode=NONE can't be connected by default, please use connected=false in such case.
	// It defines if NIC is connected or not.
	// +kubebuilder:validation:Optional
	Connected *bool `json:"connected,omitempty" tf:"connected,omitempty"`

	// Settings depend on ip_allocation_mode. Field requirements for each ip_allocation_mode are listed below:
	// IP of the VM. Settings depend on `ip_allocation_mode`. Omitted or empty for DHCP, POOL, NONE. Required for MANUAL
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// IP address allocation mode. One of POOL, DHCP, MANUAL, NONE:
	// IP address allocation mode. One of POOL, DHCP, MANUAL, NONE
	// +kubebuilder:validation:Optional
	IPAllocationMode *string `json:"ipAllocationMode,omitempty" tf:"ip_allocation_mode,omitempty"`

	// Set to true if network interface should be primary. First network card in the list will be primary by default.
	// Set to true if network interface should be primary. First network card in the list will be primary by default
	// +kubebuilder:validation:Optional
	IsPrimary *bool `json:"isPrimary,omitempty" tf:"is_primary,omitempty"`

	// (Computed) Mac address of network interface.
	// Mac address of network interface
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// A name for the VM, unique within the vApp
	// Name of the network this VM should connect to. Always required except for `type` `NONE`
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network type, one of: none, vapp or org. none creates a NIC with no network attached. vapp requires name of existing vApp network (created with vcd_vapp_network). org requires attached vApp Org network name (attached with vcd_vapp_org_network).
	// Network type to use: 'vapp', 'org' or 'none'. Use 'vapp' for vApp network, 'org' to attach Org VDC network. 'none' for empty NIC.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type VMObservation struct {

	// Independent disk attachment configuration. See Disk below for details.
	// +kubebuilder:validation:Optional
	Disk []DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (v2.7+) A block providing internal disk of VM details. See Internal Disk below for details.
	// A block will show internal disk details
	InternalDisk []InternalDiskObservation `json:"internalDisk,omitempty" tf:"internal_disk,omitempty"`

	// (v3.8+) The vApp status as a numeric code.
	// Shows the status code of the VM
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// (v3.8+) The vApp status as text.
	// Shows the status of the VM
	StatusText *string `json:"statusText,omitempty" tf:"status_text,omitempty"`

	// type of the VM (either vcd_vapp_vm or vcd_vm).
	// Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
	VMType *string `json:"vmType,omitempty" tf:"vm_type,omitempty"`
}

type VMParameters struct {

	// Automatically accept EULA if OVA has it. Default is true
	// Automatically accept EULA if OVA has it
	// +kubebuilder:validation:Optional
	AcceptAllEulas *bool `json:"acceptAllEulas,omitempty" tf:"accept_all_eulas,omitempty"`

	// (Deprecated; v2.9+) Use boot_image_id instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use vcd_inserted_media.
	// Media name to add as boot image.
	// +kubebuilder:validation:Optional
	BootImage *string `json:"bootImage,omitempty" tf:"boot_image,omitempty"`

	// Media URN to mount as boot image. You can fetch it using a vcd_catalog_media data source.
	// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use vcd_inserted_media.
	// The URN of the media to use as boot image.
	// +kubebuilder:validation:Optional
	BootImageID *string `json:"bootImageId,omitempty" tf:"boot_image_id,omitempty"`

	// The number of cores per socket.
	// The number of cores per socket
	// +kubebuilder:validation:Optional
	CPUCores *float64 `json:"cpuCores,omitempty" tf:"cpu_cores,omitempty"`

	// True if the virtual machine supports addition of virtual CPUs while powered on. Default is false.
	// True if the virtual machine supports addition of virtual CPUs while powered on.
	// +kubebuilder:validation:Optional
	CPUHotAddEnabled *bool `json:"cpuHotAddEnabled,omitempty" tf:"cpu_hot_add_enabled,omitempty"`

	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. -1 value for unlimited.
	// The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when the resource allocation is not unlimited.
	// +kubebuilder:validation:Optional
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	// +kubebuilder:validation:Optional
	CPUPriority *string `json:"cpuPriority,omitempty" tf:"cpu_priority,omitempty"`

	// The amount of MHz reservation on the underlying virtualization infrastructure.
	// The amount of MHz reservation on the underlying virtualization infrastructure
	// +kubebuilder:validation:Optional
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// Custom priority for the resource in MHz. This is a read-only, unless the cpu_priority is "CUSTOM"
	// Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
	// +kubebuilder:validation:Optional
	CPUShares *float64 `json:"cpuShares,omitempty" tf:"cpu_shares,omitempty"`

	// (Deprecated; v2.9+) Use a vcd_catalog data source along with vapp_template_id or boot_image_id instead. The catalog name in which to find the given vApp Template or media for boot_image.
	// The catalog name in which to find the given vApp Template or media for boot_image
	// +kubebuilder:validation:Optional
	CatalogName *string `json:"catalogName,omitempty" tf:"catalog_name,omitempty"`

	// Computer name to assign to this virtual machine.
	// Computer name to assign to this virtual machine
	// +kubebuilder:validation:Optional
	ComputerName *string `json:"computerName,omitempty" tf:"computer_name,omitempty"`

	// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If cpu_hot_add_enabled is true, then cpus will be increased without VM power off.
	// The number of virtual CPUs to allocate to the VM
	// +kubebuilder:validation:Optional
	Cpus *float64 `json:"cpus,omitempty" tf:"cpus,omitempty"`

	// A block to define for guest customization options. See Customization
	// Guest customization block
	// +kubebuilder:validation:Optional
	Customization []CustomizationParameters `json:"customization,omitempty" tf:"customization,omitempty"`

	// The VM description. Note: for VM from Template description is read only. Currently, this field has
	// the description of the OVA used to create the VM.
	// The VM description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Independent disk attachment configuration. See Disk below for details.
	// +kubebuilder:validation:Optional
	Disk []DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// Boolean for exposing full CPU virtualization to the
	// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
	// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is false.
	// Expose hardware-assisted CPU virtualization to guest OS.
	// +kubebuilder:validation:Optional
	ExposeHardwareVirtualization *bool `json:"exposeHardwareVirtualization,omitempty" tf:"expose_hardware_virtualization,omitempty"`

	// Key value map of guest properties
	// Key/value settings for guest properties
	// +kubebuilder:validation:Optional
	GuestProperties map[string]*string `json:"guestProperties,omitempty" tf:"guest_properties,omitempty"`

	// Virtual Hardware Version (e.g.vmx-14, vmx-13, vmx-12, etc.). Required when creating empty VM.
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
	// +kubebuilder:validation:Optional
	HardwareVersion *string `json:"hardwareVersion,omitempty" tf:"hardware_version,omitempty"`

	// VM Hyper Reference
	// +kubebuilder:validation:Optional
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// The amount of RAM (in MB) to allocate to the VM. If memory_hot_add_enabled is true, then memory will be increased without VM power off
	// The amount of RAM (in MB) to allocate to the VM
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// True if the virtual machine supports addition of memory while powered on. Default is false.
	// True if the virtual machine supports addition of memory while powered on.
	// +kubebuilder:validation:Optional
	MemoryHotAddEnabled *bool `json:"memoryHotAddEnabled,omitempty" tf:"memory_hot_add_enabled,omitempty"`

	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. -1 value for unlimited.
	// The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid when the resource allocation is not unlimited.
	// +kubebuilder:validation:Optional
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	// +kubebuilder:validation:Optional
	MemoryPriority *string `json:"memoryPriority,omitempty" tf:"memory_priority,omitempty"`

	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	// +kubebuilder:validation:Optional
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// Custom priority for the resource in MB. This is a read-only, unless the memory_priority is "CUSTOM"
	// Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
	// +kubebuilder:validation:Optional
	MemoryShares *float64 `json:"memoryShares,omitempty" tf:"memory_shares,omitempty"`

	// (Deprecated; v2.2+) Use metadata_entry instead. Key value map of metadata to assign to this VM
	// Key value map of metadata to assign to this VM
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given VM
	// +kubebuilder:validation:Optional
	MetadataEntry []VMMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// A block to define network interface. Multiple can be used. See Network and
	// example for usage details.
	// A block to define network interface. Multiple can be used.
	// +kubebuilder:validation:Optional
	Network []VMNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Optional number of seconds to try and wait for DHCP IP (only valid
	// for adapters in network block with ip_allocation_mode=DHCP). It constantly checks if IP is present so the time given
	// is a maximum. VM must be powered on and at least one of the following must be true:
	// Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
	// +kubebuilder:validation:Optional
	NetworkDHCPWaitSeconds *float64 `json:"networkDhcpWaitSeconds,omitempty" tf:"network_dhcp_wait_seconds,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
	// Operating System type. Possible values can be found in documentation.
	// +kubebuilder:validation:Optional
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// Allows to update internal disk in template before first VM boot. Disk is matched by bus_type, bus_number and unit_number. See Override template Disk below for details.
	// A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number and unit_number.
	// +kubebuilder:validation:Optional
	OverrideTemplateDisk []OverrideTemplateDiskParameters `json:"overrideTemplateDisk,omitempty" tf:"override_template_disk,omitempty"`

	// VM placement policy ID. To be used, it needs to be assigned to Org VDC
	// using vcd_org_vdc.vm_placement_policy_ids (and optionally vcd_org_vdc.default_compute_policy_id to make it default).
	// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to "" to be removed.
	// VM placement policy ID. Has to be assigned to Org VDC.
	// +kubebuilder:validation:Optional
	PlacementPolicyID *string `json:"placementPolicyId,omitempty" tf:"placement_policy_id,omitempty"`

	// A boolean value stating if this VM should be powered on. Default is true
	// A boolean value stating if this VM should be powered on
	// +kubebuilder:validation:Optional
	PowerOn *bool `json:"powerOn,omitempty" tf:"power_on,omitempty"`

	// True if the update of resource should fail when virtual machine power off needed. Default is false.
	// True if the update of resource should fail when virtual machine power off needed.
	// +kubebuilder:validation:Optional
	PreventUpdatePowerOff *bool `json:"preventUpdatePowerOff,omitempty" tf:"prevent_update_power_off,omitempty"`

	// VM sizing policy ID. To be used, it needs to be assigned to Org VDC
	// using vcd_org_vdc.vm_sizing_policy_ids (and vcd_org_vdc.default_compute_policy_id to make it default).
	// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to "" to be removed.
	// VM sizing policy ID. Has to be assigned to Org VDC.
	// +kubebuilder:validation:Optional
	SizingPolicyID *string `json:"sizingPolicyId,omitempty" tf:"sizing_policy_id,omitempty"`

	// Storage profile to override the default one
	// Storage profile to override the default one
	// +kubebuilder:validation:Optional
	StorageProfile *string `json:"storageProfile,omitempty" tf:"storage_profile,omitempty"`

	// (Deprecated; v2.9+) Use vapp_template_id instead. The name of the vApp Template to use
	// The name of the vApp Template to use
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
	// The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
	// +kubebuilder:validation:Optional
	VMNameInTemplate *string `json:"vmNameInTemplate,omitempty" tf:"vm_name_in_template,omitempty"`

	// The vApp this VM belongs to.
	// The vApp this VM belongs to - Required, unless it is a standalone VM
	// +crossplane:generate:reference:type=Vapp
	// +kubebuilder:validation:Optional
	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`

	// Reference to a Vapp to populate vappName.
	// +kubebuilder:validation:Optional
	VappNameRef *v1.Reference `json:"vappNameRef,omitempty" tf:"-"`

	// Selector for a Vapp to populate vappName.
	// +kubebuilder:validation:Optional
	VappNameSelector *v1.Selector `json:"vappNameSelector,omitempty" tf:"-"`

	// The URN of the vApp Template to use. You can fetch it using a vcd_catalog_vapp_template data source.
	// The URN of the vApp Template to use
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/catalog/v1beta1.VappTemplate
	// +kubebuilder:validation:Optional
	VappTemplateID *string `json:"vappTemplateId,omitempty" tf:"vapp_template_id,omitempty"`

	// Reference to a VappTemplate in catalog to populate vappTemplateId.
	// +kubebuilder:validation:Optional
	VappTemplateIDRef *v1.Reference `json:"vappTemplateIdRef,omitempty" tf:"-"`

	// Selector for a VappTemplate in catalog to populate vappTemplateId.
	// +kubebuilder:validation:Optional
	VappTemplateIDSelector *v1.Selector `json:"vappTemplateIdSelector,omitempty" tf:"-"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// VMSpec defines the desired state of VM
type VMSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VMParameters `json:"forProvider"`
}

// VMStatus defines the observed state of VM.
type VMStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VMObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VM is the Schema for the VMs API. Provides a VMware Cloud Director VM resource. This can be used to create, modify, and delete VMs within a vApp.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VM struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VMSpec   `json:"spec"`
	Status            VMStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VMList contains a list of VMs
type VMList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VM `json:"items"`
}

// Repository type metadata.
var (
	VM_Kind             = "VM"
	VM_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VM_Kind}.String()
	VM_KindAPIVersion   = VM_Kind + "." + CRDGroupVersion.String()
	VM_GroupVersionKind = CRDGroupVersion.WithKind(VM_Kind)
)

func init() {
	SchemeBuilder.Register(&VM{}, &VMList{})
}
