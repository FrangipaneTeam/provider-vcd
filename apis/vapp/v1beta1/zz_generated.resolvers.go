/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta11 "github.com/FrangipaneTeam/provider-vcd/apis/catalog/v1beta1"
	v1beta1 "github.com/FrangipaneTeam/provider-vcd/apis/vm/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this FirewallRules.
func (mg *FirewallRules) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VappID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VappIDRef,
		Selector:     mg.Spec.ForProvider.VappIDSelector,
		To: reference.To{
			List:    &VappList{},
			Managed: &Vapp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VappID")
	}
	mg.Spec.ForProvider.VappID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VappIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NATRules.
func (mg *NATRules) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].VMID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Rule[i3].VMIDRef,
			Selector:     mg.Spec.ForProvider.Rule[i3].VMIDSelector,
			To: reference.To{
				List:    &v1beta1.VMList{},
				Managed: &v1beta1.VM{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].VMID")
		}
		mg.Spec.ForProvider.Rule[i3].VMID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Rule[i3].VMIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VappID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VappIDRef,
		Selector:     mg.Spec.ForProvider.VappIDSelector,
		To: reference.To{
			List:    &VappList{},
			Managed: &Vapp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VappID")
	}
	mg.Spec.ForProvider.VappID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VappIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StaticRouting.
func (mg *StaticRouting) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VappID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VappIDRef,
		Selector:     mg.Spec.ForProvider.VappIDSelector,
		To: reference.To{
			List:    &VappList{},
			Managed: &Vapp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VappID")
	}
	mg.Spec.ForProvider.VappID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VappIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VM.
func (mg *VM) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VappName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VappNameRef,
		Selector:     mg.Spec.ForProvider.VappNameSelector,
		To: reference.To{
			List:    &VappList{},
			Managed: &Vapp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VappName")
	}
	mg.Spec.ForProvider.VappName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VappNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VappTemplateID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VappTemplateIDRef,
		Selector:     mg.Spec.ForProvider.VappTemplateIDSelector,
		To: reference.To{
			List:    &v1beta11.VappTemplateList{},
			Managed: &v1beta11.VappTemplate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VappTemplateID")
	}
	mg.Spec.ForProvider.VappTemplateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VappTemplateIDRef = rsp.ResolvedReference

	return nil
}
