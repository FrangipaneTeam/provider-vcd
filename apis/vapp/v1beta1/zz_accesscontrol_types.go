/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// one or more blocks defining a subject to which we are sharing.
	// See shared_with below for detail. It cannot be used if shared_with_everyone is set.
	// +kubebuilder:validation:Optional
	SharedWith []SharedWithObservation `json:"sharedWith,omitempty" tf:"shared_with,omitempty"`
}

type AccessControlParameters struct {

	// Access level when the vApp is shared with everyone (one of ReadOnly, Change,
	// FullControl). Required if shared_with_everyone is true.
	// Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when shared_with_everyone is set
	// +kubebuilder:validation:Optional
	EveryoneAccessLevel *string `json:"everyoneAccessLevel,omitempty" tf:"everyone_access_level,omitempty"`

	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// one or more blocks defining a subject to which we are sharing.
	// See shared_with below for detail. It cannot be used if shared_with_everyone is set.
	// +kubebuilder:validation:Optional
	SharedWith []SharedWithParameters `json:"sharedWith,omitempty" tf:"shared_with,omitempty"`

	// Whether the vApp is shared with everyone. If any shared_with blocks are included,
	// this property must be set to false.
	// Whether the vApp is shared with everyone
	// +kubebuilder:validation:Required
	SharedWithEveryone *bool `json:"sharedWithEveryone" tf:"shared_with_everyone,omitempty"`

	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type SharedWithObservation struct {

	// (Computed) the name of the subject (group or user) with which we are sharing.
	// Name of the subject (group or user) with which we are sharing
	SubjectName *string `json:"subjectName,omitempty" tf:"subject_name,omitempty"`
}

type SharedWithParameters struct {

	// The access level for the user or group to which we are sharing. (One of ReadOnly, Change, FullControl)
	// The access level for the user or group to which we are sharing. (One of ReadOnly, Change, FullControl)
	// +kubebuilder:validation:Required
	AccessLevel *string `json:"accessLevel" tf:"access_level,omitempty"`

	// The ID of a group with which we are sharing. Required if user_id is not set.
	// ID of the group to which we are sharing. Required if user_id is not set
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The ID of a user with which we are sharing. Required if group_id is not set.
	// ID of the user to which we are sharing. Required if group_id is not set
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// AccessControlSpec defines the desired state of AccessControl
type AccessControlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessControlParameters `json:"forProvider"`
}

// AccessControlStatus defines the observed state of AccessControl.
type AccessControlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessControlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessControl is the Schema for the AccessControls API. Provides a VMware Cloud Director Access Control structure for a vApp.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type AccessControl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessControlSpec   `json:"spec"`
	Status            AccessControlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessControlList contains a list of AccessControls
type AccessControlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessControl `json:"items"`
}

// Repository type metadata.
var (
	AccessControl_Kind             = "AccessControl"
	AccessControl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessControl_Kind}.String()
	AccessControl_KindAPIVersion   = AccessControl_Kind + "." + CRDGroupVersion.String()
	AccessControl_GroupVersionKind = CRDGroupVersion.WithKind(AccessControl_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessControl{}, &AccessControlList{})
}
