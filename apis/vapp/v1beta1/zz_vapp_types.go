/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LeaseObservation struct {
}

type LeaseParameters struct {

	// How long any of the VMs in the vApp can run before the vApp is automatically powered off or suspended. 0 means never expires (or maximum allowed by Org). Regular values accepted from 3600+.
	// How long any of the VMs in the vApp can run before the vApp is automatically powered off or suspended. 0 means never expires
	// +kubebuilder:validation:Required
	RuntimeLeaseInSec *float64 `json:"runtimeLeaseInSec" tf:"runtime_lease_in_sec,omitempty"`

	// How long the vApp is available before being automatically deleted or marked as expired. 0 means never expires (or maximum allowed by Org). Regular values accepted from 3600+.
	// How long the vApp is available before being automatically deleted or marked as expired. 0 means never expires
	// +kubebuilder:validation:Required
	StorageLeaseInSec *float64 `json:"storageLeaseInSec" tf:"storage_lease_in_sec,omitempty"`
}

type MetadataEntryObservation struct {
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VappObservation struct {

	// (Computed) The vApp Hyper Reference.
	// vApp Hyper Reference
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed; v2.5+) The vApp status as a numeric code.
	// Shows the status code of the vApp
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// (Computed; v2.5+) The vApp status as text.
	// Shows the status of the vApp
	StatusText *string `json:"statusText,omitempty" tf:"status_text,omitempty"`
}

type VappParameters struct {

	// An optional description for the vApp, up to 256 characters.
	// Optional description of the vApp
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key value map of vApp guest properties
	// Key/value settings for guest properties. Will be picked up by new VMs when created.
	// +kubebuilder:validation:Optional
	GuestProperties map[string]*string `json:"guestProperties,omitempty" tf:"guest_properties,omitempty"`

	// the information about the vApp lease. It includes the fields below. When this section is
	// included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
	// are silently reduced to the highest value allowed.
	// Defines lease parameters for this vApp
	// +kubebuilder:validation:Optional
	Lease []LeaseParameters `json:"lease,omitempty" tf:"lease,omitempty"`

	// (Deprecated) Use metadata_entry instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since v2.2+ metadata is added directly to vApp instead of first VM in vApp)
	// Key value map of metadata to assign to this vApp. Key and value can be any string.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given vApp
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A boolean value stating if this vApp should be powered on. Default is false. Works only on update when vApp already has VMs.
	// A boolean value stating if this vApp should be powered on
	// +kubebuilder:validation:Optional
	PowerOn *bool `json:"powerOn,omitempty" tf:"power_on,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// VappSpec defines the desired state of Vapp
type VappSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VappParameters `json:"forProvider"`
}

// VappStatus defines the observed state of Vapp.
type VappStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VappObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vapp is the Schema for the Vapps API. Provides a VMware Cloud Director vApp resource. This can be used to create, modify, and delete vApps.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Vapp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VappSpec   `json:"spec"`
	Status            VappStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VappList contains a list of Vapps
type VappList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vapp `json:"items"`
}

// Repository type metadata.
var (
	Vapp_Kind             = "Vapp"
	Vapp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vapp_Kind}.String()
	Vapp_KindAPIVersion   = Vapp_Kind + "." + CRDGroupVersion.String()
	Vapp_GroupVersionKind = CRDGroupVersion.WithKind(Vapp_Kind)
)

func init() {
	SchemeBuilder.Register(&Vapp{}, &VappList{})
}
