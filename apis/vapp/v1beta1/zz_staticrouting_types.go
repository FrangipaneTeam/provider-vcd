/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StaticRoutingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StaticRoutingParameters struct {

	// Enable or disable static Routing. Default is true.
	// Enable or disable static Routing. Default is `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Configures a static routing rule; see Rules below for details.
	// +kubebuilder:validation:Optional
	Rule []StaticRoutingRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The identifier of vApp.
	// vApp identifier
	// +crossplane:generate:reference:type=Vapp
	// +kubebuilder:validation:Optional
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// Reference to a Vapp to populate vappId.
	// +kubebuilder:validation:Optional
	VappIDRef *v1.Reference `json:"vappIdRef,omitempty" tf:"-"`

	// Selector for a Vapp to populate vappId.
	// +kubebuilder:validation:Optional
	VappIDSelector *v1.Selector `json:"vappIdSelector,omitempty" tf:"-"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type StaticRoutingRuleObservation struct {
}

type StaticRoutingRuleParameters struct {

	// Name for the static route.
	// Name for the static route.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Network specification in CIDR.
	// network specification in CIDR.
	// +kubebuilder:validation:Required
	NetworkCidr *string `json:"networkCidr" tf:"network_cidr,omitempty"`

	// IP address of Next Hop router/gateway.
	// IP Address of Next Hop router/gateway.
	// +kubebuilder:validation:Required
	NextHopIP *string `json:"nextHopIp" tf:"next_hop_ip,omitempty"`
}

// StaticRoutingSpec defines the desired state of StaticRouting
type StaticRoutingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StaticRoutingParameters `json:"forProvider"`
}

// StaticRoutingStatus defines the observed state of StaticRouting.
type StaticRoutingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StaticRoutingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StaticRouting is the Schema for the StaticRoutings API. Provides a VMware Cloud Director vApp static routing resource. This can be used to create, modify, and delete static routing rules.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type StaticRouting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StaticRoutingSpec   `json:"spec"`
	Status            StaticRoutingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StaticRoutingList contains a list of StaticRoutings
type StaticRoutingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StaticRouting `json:"items"`
}

// Repository type metadata.
var (
	StaticRouting_Kind             = "StaticRouting"
	StaticRouting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StaticRouting_Kind}.String()
	StaticRouting_KindAPIVersion   = StaticRouting_Kind + "." + CRDGroupVersion.String()
	StaticRouting_GroupVersionKind = CRDGroupVersion.WithKind(StaticRouting_Kind)
)

func init() {
	SchemeBuilder.Register(&StaticRouting{}, &StaticRoutingList{})
}
