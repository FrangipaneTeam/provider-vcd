/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BundleObservation struct {

	// Key used for internationalization
	// Key used for internationalization
	BundleKey *string `json:"bundleKey,omitempty" tf:"bundle_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether this rights bundle is read-only
	// Whether this rights bundle is read-only
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type BundleParameters struct {

	// A description of the rights bundle
	// Rights bundle description
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// When true, publishes the rights bundle to all tenants
	// When true, publishes the rights bundle to all tenants
	// +kubebuilder:validation:Required
	PublishToAllTenants *bool `json:"publishToAllTenants" tf:"publish_to_all_tenants,omitempty"`

	// Set of rights assigned to this role
	// Set of rights assigned to this rights bundle
	// +kubebuilder:validation:Optional
	Rights []*string `json:"rights,omitempty" tf:"rights,omitempty"`

	// Set of tenants to which this rights bundle gets published. Ignored if publish_to_all_tenants is true.
	// Set of tenants to which this rights bundle is published
	// +kubebuilder:validation:Optional
	Tenants []*string `json:"tenants,omitempty" tf:"tenants,omitempty"`
}

// BundleSpec defines the desired state of Bundle
type BundleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BundleParameters `json:"forProvider"`
}

// BundleStatus defines the observed state of Bundle.
type BundleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BundleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Bundle is the Schema for the Bundles API. Provides a VMware Cloud Director rights bundle. This can be used to create, modify, and delete rights bundles.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Bundle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BundleSpec   `json:"spec"`
	Status            BundleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BundleList contains a list of Bundles
type BundleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bundle `json:"items"`
}

// Repository type metadata.
var (
	Bundle_Kind             = "Bundle"
	Bundle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bundle_Kind}.String()
	Bundle_KindAPIVersion   = Bundle_Kind + "." + CRDGroupVersion.String()
	Bundle_GroupVersionKind = CRDGroupVersion.WithKind(Bundle_Kind)
)

func init() {
	SchemeBuilder.Register(&Bundle{}, &BundleList{})
}
