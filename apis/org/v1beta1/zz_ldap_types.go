/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomSettingsObservation struct {
}

type CustomSettingsParameters struct {

	// Authentication method: one of SIMPLE, MD5DIGEST, NTLM
	// authentication method: one of SIMPLE, MD5DIGEST, NTLM
	// +kubebuilder:validation:Required
	AuthenticationMethod *string `json:"authenticationMethod" tf:"authentication_method,omitempty"`

	// LDAP search base
	// LDAP search base
	// +kubebuilder:validation:Optional
	BaseDistinguishedName *string `json:"baseDistinguishedName,omitempty" tf:"base_distinguished_name,omitempty"`

	// Type of connector: one of OPEN_LDAP, ACTIVE_DIRECTORY
	// type of connector: one of OPEN_LDAP, ACTIVE_DIRECTORY
	// +kubebuilder:validation:Required
	ConnectorType *string `json:"connectorType" tf:"connector_type,omitempty"`

	// Group settings when ldap_mode is CUSTOM See Group Attributes below for details
	// Group settings when `ldap_mode` is CUSTOM
	// +kubebuilder:validation:Required
	GroupAttributes []GroupAttributesParameters `json:"groupAttributes" tf:"group_attributes,omitempty"`

	// True if the LDAP service requires an SSL connection
	// True if the LDAP service requires an SSL connection
	// +kubebuilder:validation:Optional
	IsSSL *bool `json:"isSsl,omitempty" tf:"is_ssl,omitempty"`

	// Password for the user identified by UserName. This value is never returned by GET.
	// It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed
	// Password for the user identified by UserName. This value is never returned by GET. It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Port number of the LDAP server (usually 389 for LDAP, 636 for LDAPS)
	// Port number for LDAP service
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// The IP address or host name of the server providing the LDAP service
	// host name or IP of the LDAP server
	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`

	// User settings when ldap_mode is CUSTOM See User Attributes below for details
	// User settings when `ldap_mode` is CUSTOM
	// +kubebuilder:validation:Required
	UserAttributes []UserAttributesParameters `json:"userAttributes" tf:"user_attributes,omitempty"`

	// Username to use when logging in to LDAP, specified using LDAP attribute=value pairs
	// (for example: cn="ldap-admin", c="example", dc="com")
	// Username to use when logging in to LDAP, specified using LDAP attribute=value pairs (for example: cn="ldap-admin", c="example", dc="com")
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GroupAttributesObservation struct {
}

type GroupAttributesParameters struct {

	// LDAP attribute that returns the identifiers of all the groups of which the user is a member
	// LDAP group attribute used to identify a group member
	// +kubebuilder:validation:Optional
	GroupBackLinkIdentifier *string `json:"groupBackLinkIdentifier,omitempty" tf:"group_back_link_identifier,omitempty"`

	// LDAP attribute that identifies a user as a member of a group. For example, dn
	// LDAP attribute that identifies a group as a member of another group. For example, dn
	// +kubebuilder:validation:Required
	GroupMembershipIdentifier *string `json:"groupMembershipIdentifier" tf:"group_membership_identifier,omitempty"`

	// LDAP attribute to use when getting the members of a group. For example, member
	// LDAP attribute to use when getting the members of a group. For example, member
	// +kubebuilder:validation:Required
	Membership *string `json:"membership" tf:"membership,omitempty"`

	// LDAP attribute to use for the group name. For example, cn
	// LDAP attribute to use for the group name. For example, cn
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// LDAP objectClass of which imported users are members. For example, user or person
	// LDAP objectClass of which imported groups are members. For example, group
	// +kubebuilder:validation:Required
	ObjectClass *string `json:"objectClass" tf:"object_class,omitempty"`

	// LDAP attribute to use as the unique identifier for a user. For example, objectGuid
	// LDAP attribute to use as the unique identifier for a group. For example, objectGuid
	// +kubebuilder:validation:Required
	UniqueIdentifier *string `json:"uniqueIdentifier" tf:"unique_identifier,omitempty"`
}

type LdapObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LdapParameters struct {

	// LDAP server configuration. Becomes mandatory if ldap_mode is set to CUSTOM. See Custom Settings below for details
	// Custom settings when `ldap_mode` is CUSTOM
	// +kubebuilder:validation:Optional
	CustomSettings []CustomSettingsParameters `json:"customSettings,omitempty" tf:"custom_settings,omitempty"`

	// One of NONE, CUSTOM, SYSTEM. Note that using NONE has the effect of removing the LDAP settings
	// Type of LDAP settings (one of NONE, SYSTEM, CUSTOM)
	// +kubebuilder:validation:Required
	LdapMode *string `json:"ldapMode" tf:"ldap_mode,omitempty"`

	// Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.
	// Organization ID
	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`
}

type UserAttributesObservation struct {
}

type UserAttributesParameters struct {

	// LDAP attribute to use for the user's full name. For example, displayName
	// LDAP attribute to use for the user's full name. For example, displayName
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// LDAP attribute to use for the user's email address. For example, mail
	// LDAP attribute to use for the user's email address. For example, mail
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// LDAP attribute to use for the user's given name. For example, givenName
	// LDAP attribute to use for the user's given name. For example, givenName
	// +kubebuilder:validation:Required
	GivenName *string `json:"givenName" tf:"given_name,omitempty"`

	// LDAP attribute that returns the identifiers of all the groups of which the user is a member
	// LDAP attribute that returns the identifiers of all the groups of which the user is a member
	// +kubebuilder:validation:Optional
	GroupBackLinkIdentifier *string `json:"groupBackLinkIdentifier,omitempty" tf:"group_back_link_identifier,omitempty"`

	// LDAP attribute that identifies a user as a member of a group. For example, dn
	// LDAP attribute that identifies a user as a member of a group. For example, dn
	// +kubebuilder:validation:Required
	GroupMembershipIdentifier *string `json:"groupMembershipIdentifier" tf:"group_membership_identifier,omitempty"`

	// LDAP objectClass of which imported users are members. For example, user or person
	// LDAP objectClass of which imported users are members. For example, user or person
	// +kubebuilder:validation:Required
	ObjectClass *string `json:"objectClass" tf:"object_class,omitempty"`

	// LDAP attribute to use for the user's surname. For example, sn
	// LDAP attribute to use for the user's surname. For example, sn
	// +kubebuilder:validation:Required
	Surname *string `json:"surname" tf:"surname,omitempty"`

	// LDAP attribute to use for the user's telephone number. For example, telephoneNumber
	// LDAP attribute to use for the user's telephone number. For example, telephoneNumber
	// +kubebuilder:validation:Required
	Telephone *string `json:"telephone" tf:"telephone,omitempty"`

	// LDAP attribute to use as the unique identifier for a user. For example, objectGuid
	// LDAP attribute to use as the unique identifier for a user. For example, objectGuid
	// +kubebuilder:validation:Required
	UniqueIdentifier *string `json:"uniqueIdentifier" tf:"unique_identifier,omitempty"`

	// Username to use when logging in to LDAP, specified using LDAP attribute=value pairs
	// (for example: cn="ldap-admin", c="example", dc="com")
	// LDAP attribute to use when looking up a user name to import. For example, userPrincipalName or samAccountName
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// LdapSpec defines the desired state of Ldap
type LdapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LdapParameters `json:"forProvider"`
}

// LdapStatus defines the observed state of Ldap.
type LdapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LdapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ldap is the Schema for the Ldaps API. Provides a VMware Cloud Director Organization LDAP resource. This can be used to create, delete, and update LDAP configuration for an organization .
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Ldap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LdapSpec   `json:"spec"`
	Status            LdapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LdapList contains a list of Ldaps
type LdapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ldap `json:"items"`
}

// Repository type metadata.
var (
	Ldap_Kind             = "Ldap"
	Ldap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ldap_Kind}.String()
	Ldap_KindAPIVersion   = Ldap_Kind + "." + CRDGroupVersion.String()
	Ldap_GroupVersionKind = CRDGroupVersion.WithKind(Ldap_Kind)
)

func init() {
	SchemeBuilder.Register(&Ldap{}, &LdapList{})
}
