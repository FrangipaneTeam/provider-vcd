/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CPUObservation struct {
	Reserved *float64 `json:"reserved,omitempty" tf:"reserved,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type CPUParameters struct {

	// Capacity that is committed to be available. Value in MB or MHz. Used with AllocationPool ("Allocation pool"), ReservationPool ("Reservation pool"), Flex.
	// Capacity that is committed to be available. Value in MB or MHz. Used with AllocationPool (Allocation pool) and ReservationPool (Reservation pool).
	// +kubebuilder:validation:Optional
	Allocated *float64 `json:"allocated,omitempty" tf:"allocated,omitempty"`

	// Maximum number of MB allocated for this storage profile. A value of 0 specifies unlimited MB.
	// Capacity limit relative to the value specified for Allocation. It must not be less than that value. If it is greater than that value, it implies over provisioning. A value of 0 specifies unlimited units. Value in MB or MHz. Used with AllocationVApp (Pay as you go).
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`
}

type ComputeCapacityObservation struct {

	// +kubebuilder:validation:Required
	CPU []CPUObservation `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Required
	Memory []MemoryObservation `json:"memory,omitempty" tf:"memory,omitempty"`
}

type ComputeCapacityParameters struct {

	// +kubebuilder:validation:Required
	CPU []CPUParameters `json:"cpu" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Required
	Memory []MemoryParameters `json:"memory" tf:"memory,omitempty"`
}

type MemoryObservation struct {
	Reserved *float64 `json:"reserved,omitempty" tf:"reserved,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type MemoryParameters struct {

	// Capacity that is committed to be available. Value in MB or MHz. Used with AllocationPool ("Allocation pool"), ReservationPool ("Reservation pool"), Flex.
	// Capacity that is committed to be available. Value in MB or MHz. Used with AllocationPool (Allocation pool) and ReservationPool (Reservation pool).
	// +kubebuilder:validation:Optional
	Allocated *float64 `json:"allocated,omitempty" tf:"allocated,omitempty"`

	// Maximum number of MB allocated for this storage profile. A value of 0 specifies unlimited MB.
	// Capacity limit relative to the value specified for Allocation. It must not be less than that value. If it is greater than that value, it implies over provisioning. A value of 0 specifies unlimited units. Value in MB or MHz. Used with AllocationVApp (Pay as you go).
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`
}

type MetadataEntryObservation struct {
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StorageProfileObservation struct {

	// (Computed, v3.1+) Storage used, in Megabytes.
	// Storage used in MB
	StorageUsedInMb *float64 `json:"storageUsedInMb,omitempty" tf:"storage_used_in_mb,omitempty"`
}

type StorageProfileParameters struct {

	// True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified.
	// True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified.
	// +kubebuilder:validation:Required
	Default *bool `json:"default" tf:"default,omitempty"`

	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	// True if this storage profile is enabled for use in the VDC.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Maximum number of MB allocated for this storage profile. A value of 0 specifies unlimited MB.
	// Maximum number of MB allocated for this storage profile. A value of 0 specifies unlimited MB.
	// +kubebuilder:validation:Required
	Limit *float64 `json:"limit" tf:"limit,omitempty"`

	// VDC name
	// Name of Provider VDC storage profile.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type VdcObservation struct {

	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	// The compute capacity allocated to this VDC.
	// +kubebuilder:validation:Required
	ComputeCapacity []ComputeCapacityObservation `json:"computeCapacity,omitempty" tf:"compute_capacity,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	// Storage profiles supported by this VDC.
	// +kubebuilder:validation:Required
	StorageProfile []StorageProfileObservation `json:"storageProfile,omitempty" tf:"storage_profile,omitempty"`
}

type VdcParameters struct {

	// The allocation model used by this VDC; must be one of
	// The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
	// +kubebuilder:validation:Required
	AllocationModel *string `json:"allocationModel" tf:"allocation_model,omitempty"`

	// Set to false to disallow creation of the VDC if the allocation_model is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	// Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	// +kubebuilder:validation:Optional
	AllowOverCommit *bool `json:"allowOverCommit,omitempty" tf:"allow_over_commit,omitempty"`

	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when allocation_model is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the element is empty, vCD sets a value
	// +kubebuilder:validation:Optional
	CPUGuaranteed *float64 `json:"cpuGuaranteed,omitempty" tf:"cpu_guaranteed,omitempty"`

	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when allocation_model is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
	// +kubebuilder:validation:Optional
	CPUSpeed *float64 `json:"cpuSpeed,omitempty" tf:"cpu_speed,omitempty"`

	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	// The compute capacity allocated to this VDC.
	// +kubebuilder:validation:Required
	ComputeCapacity []ComputeCapacityParameters `json:"computeCapacity" tf:"compute_capacity,omitempty"`

	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
	// ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	// +kubebuilder:validation:Optional
	DefaultComputePolicyID *string `json:"defaultComputePolicyId,omitempty" tf:"default_compute_policy_id,omitempty"`

	// (Deprecated; Optional, v3.0+, VCD 10.2+) ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of default_compute_policy_id.
	// ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
	// +kubebuilder:validation:Optional
	DefaultVMSizingPolicyID *string `json:"defaultVmSizingPolicyId,omitempty" tf:"default_vm_sizing_policy_id,omitempty"`

	// When destroying use delete_force=true to remove a VDC and any objects it contains, regardless of their state.
	// When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
	// +kubebuilder:validation:Required
	DeleteForce *bool `json:"deleteForce" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=true to remove the VDC and any objects it contains that are in a state that normally allows removal.
	// When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that normally allows removal.
	// +kubebuilder:validation:Required
	DeleteRecursive *bool `json:"deleteRecursive" tf:"delete_recursive,omitempty"`

	// VDC friendly description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An ID of NSX-T Edge Cluster which should
	// provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
	// vcd_nsxt_edge_cluster data source.
	// ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
	// +kubebuilder:validation:Optional
	EdgeClusterID *string `json:"edgeClusterId,omitempty" tf:"edge_cluster_id,omitempty"`

	// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
	// Set to true to indicate if the Flex VDC is to be elastic.
	// +kubebuilder:validation:Optional
	Elasticity *bool `json:"elasticity,omitempty" tf:"elasticity,omitempty"`

	// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	// Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	// +kubebuilder:validation:Optional
	EnableFastProvisioning *bool `json:"enableFastProvisioning,omitempty" tf:"enable_fast_provisioning,omitempty"`

	// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	// Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	// +kubebuilder:validation:Optional
	EnableThinProvisioning *bool `json:"enableThinProvisioning,omitempty" tf:"enable_thin_provisioning,omitempty"`

	// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	// True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	// +kubebuilder:validation:Optional
	EnableVMDiscovery *bool `json:"enableVmDiscovery,omitempty" tf:"enable_vm_discovery,omitempty"`

	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model.
	// Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
	// +kubebuilder:validation:Optional
	IncludeVMMemoryOverhead *bool `json:"includeVmMemoryOverhead,omitempty" tf:"include_vm_memory_overhead,omitempty"`

	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when allocation_model is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
	// +kubebuilder:validation:Optional
	MemoryGuaranteed *float64 `json:"memoryGuaranteed,omitempty" tf:"memory_guaranteed,omitempty"`

	// (Deprecated; v2.4+) Use metadata_entry instead. Key value map of metadata to assign to this VDC
	// Key and value pairs for Org VDC metadata
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given VDC
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	// The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	// +kubebuilder:validation:Optional
	NetworkPoolName *string `json:"networkPoolName,omitempty" tf:"network_pool_name,omitempty"`

	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	// +kubebuilder:validation:Optional
	NetworkQuota *float64 `json:"networkQuota,omitempty" tf:"network_quota,omitempty"`

	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	// +kubebuilder:validation:Optional
	NicQuota *float64 `json:"nicQuota,omitempty" tf:"nic_quota,omitempty"`

	// Organization to create the VDC in, optional if defined at provider level
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Name of the Provider VDC from which this organization VDC is provisioned.
	// A reference to the Provider VDC from which this organization VDC is provisioned.
	// +kubebuilder:validation:Required
	ProviderVdcName *string `json:"providerVdcName" tf:"provider_vdc_name,omitempty"`

	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	// Storage profiles supported by this VDC.
	// +kubebuilder:validation:Required
	StorageProfile []StorageProfileParameters `json:"storageProfile" tf:"storage_profile,omitempty"`

	// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.
	// Set of VM Placement Policy IDs
	// +kubebuilder:validation:Optional
	VMPlacementPolicyIds []*string `json:"vmPlacementPolicyIds,omitempty" tf:"vm_placement_policy_ids,omitempty"`

	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	// +kubebuilder:validation:Optional
	VMQuota *float64 `json:"vmQuota,omitempty" tf:"vm_quota,omitempty"`

	// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.
	// Set of VM Sizing Policy IDs
	// +kubebuilder:validation:Optional
	VMSizingPolicyIds []*string `json:"vmSizingPolicyIds,omitempty" tf:"vm_sizing_policy_ids,omitempty"`
}

// VdcSpec defines the desired state of Vdc
type VdcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VdcParameters `json:"forProvider"`
}

// VdcStatus defines the observed state of Vdc.
type VdcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VdcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vdc is the Schema for the Vdcs API. Provides a VMware Cloud Director Organization VDC resource. This can be used to create and delete an Organization VDC.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Vdc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VdcSpec   `json:"spec"`
	Status            VdcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VdcList contains a list of Vdcs
type VdcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vdc `json:"items"`
}

// Repository type metadata.
var (
	Vdc_Kind             = "Vdc"
	Vdc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vdc_Kind}.String()
	Vdc_KindAPIVersion   = Vdc_Kind + "." + CRDGroupVersion.String()
	Vdc_GroupVersionKind = CRDGroupVersion.WithKind(Vdc_Kind)
)

func init() {
	SchemeBuilder.Register(&Vdc{}, &VdcList{})
}
