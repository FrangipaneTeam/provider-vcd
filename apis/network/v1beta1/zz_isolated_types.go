/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DHCPPoolObservation struct {
}

type DHCPPoolParameters struct {

	// The default DHCP lease time to use. Defaults to 3600.
	// The default DHCP lease time to use
	// +kubebuilder:validation:Optional
	DefaultLeaseTime *float64 `json:"defaultLeaseTime,omitempty" tf:"default_lease_time,omitempty"`

	// The final address in the IP Range
	// The final address in the IP Range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// The maximum DHCP lease time to use. Defaults to 7200.
	// The maximum DHCP lease time to use
	// +kubebuilder:validation:Optional
	MaxLeaseTime *float64 `json:"maxLeaseTime,omitempty" tf:"max_lease_time,omitempty"`

	// The first address in the IP Range
	// The first address in the IP Range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type IsolatedMetadataEntryObservation struct {
}

type IsolatedMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IsolatedObservation struct {

	// Network Hyper Reference
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IsolatedParameters struct {

	// A range of IPs to issue to virtual machines that don't
	// have a static IP; see IP Pools below for details.
	// A range of IPs to issue to virtual machines that don't have a static IP
	// +kubebuilder:validation:Optional
	DHCPPool []DHCPPoolParameters `json:"dhcpPool,omitempty" tf:"dhcp_pool,omitempty"`

	// A FQDN for the virtual machines on this network
	// A FQDN for the virtual machines on this network
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// An optional description of the network
	// Optional description for the network
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// First DNS server to use.
	// First DNS server to use
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Second DNS server to use.
	// Second DNS server to use
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// The gateway for this network
	// The gateway for this network
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.
	// Key value map of metadata to assign to this network. Key and value can be any string
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Network
	// +kubebuilder:validation:Optional
	MetadataEntry []IsolatedMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The netmask for the new network. Defaults to 255.255.255.0
	// The netmask for the new network
	// +kubebuilder:validation:Optional
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to false.
	// Defines if this network is shared between multiple VDCs in the Org
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	// A range of IPs permitted to be used as static IPs for virtual machines
	// +kubebuilder:validation:Optional
	StaticIPPool []IsolatedStaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type IsolatedStaticIPPoolObservation struct {
}

type IsolatedStaticIPPoolParameters struct {

	// The final address in the IP Range
	// The final address in the IP Range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// The first address in the IP Range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

// IsolatedSpec defines the desired state of Isolated
type IsolatedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IsolatedParameters `json:"forProvider"`
}

// IsolatedStatus defines the observed state of Isolated.
type IsolatedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IsolatedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Isolated is the Schema for the Isolateds API. Provides a VMware Cloud Director Org VDC isolated Network. This can be used to create, modify, and delete internal networks for vApps to connect.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Isolated struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IsolatedSpec   `json:"spec"`
	Status            IsolatedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IsolatedList contains a list of Isolateds
type IsolatedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Isolated `json:"items"`
}

// Repository type metadata.
var (
	Isolated_Kind             = "Isolated"
	Isolated_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Isolated_Kind}.String()
	Isolated_KindAPIVersion   = Isolated_Kind + "." + CRDGroupVersion.String()
	Isolated_GroupVersionKind = CRDGroupVersion.WithKind(Isolated_Kind)
)

func init() {
	SchemeBuilder.Register(&Isolated{}, &IsolatedList{})
}
