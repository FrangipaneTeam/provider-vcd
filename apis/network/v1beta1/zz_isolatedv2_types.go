/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IsolatedV2MetadataEntryObservation struct {
}

type IsolatedV2MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IsolatedV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IsolatedV2Parameters struct {

	// A FQDN for the virtual machines on this network
	// DNS suffix
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// An optional description of the network
	// Network description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// First DNS server to use.
	// DNS server 1
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Second DNS server to use.
	// DNS server 1
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// The gateway for this network (e.g. 192.168.1.1)
	// Gateway IP address
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// NSX-V only. Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to false.
	// NSX-V only - share this network with other VDCs in this organization. Default - false
	// +kubebuilder:validation:Optional
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network. Not supported if the network belongs to a VDC Group.
	// Key value map of metadata to assign to this network. Key and value can be any string
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Network
	// +kubebuilder:validation:Optional
	MetadataEntry []IsolatedV2MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
	// and inherited from provider configuration)
	// ID of VDC or VDC Group
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
	// Network prefix
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	// IP ranges used for static pool allocation in the network
	// +kubebuilder:validation:Optional
	StaticIPPool []IsolatedV2StaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
	// owner_id which supports VDC and VDC Group IDs.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type IsolatedV2StaticIPPoolObservation struct {
}

type IsolatedV2StaticIPPoolParameters struct {

	// The final address in the IP Range
	// End address of the IP range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

// IsolatedV2Spec defines the desired state of IsolatedV2
type IsolatedV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IsolatedV2Parameters `json:"forProvider"`
}

// IsolatedV2Status defines the observed state of IsolatedV2.
type IsolatedV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IsolatedV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IsolatedV2 is the Schema for the IsolatedV2s API. Provides a VMware Cloud Director Org VDC isolated Network. This can be used to create, modify, and delete isolated VDC networks (backed by NSX-T or NSX-V).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type IsolatedV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IsolatedV2Spec   `json:"spec"`
	Status            IsolatedV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IsolatedV2List contains a list of IsolatedV2s
type IsolatedV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IsolatedV2 `json:"items"`
}

// Repository type metadata.
var (
	IsolatedV2_Kind             = "IsolatedV2"
	IsolatedV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IsolatedV2_Kind}.String()
	IsolatedV2_KindAPIVersion   = IsolatedV2_Kind + "." + CRDGroupVersion.String()
	IsolatedV2_GroupVersionKind = CRDGroupVersion.WithKind(IsolatedV2_Kind)
)

func init() {
	SchemeBuilder.Register(&IsolatedV2{}, &IsolatedV2List{})
}
