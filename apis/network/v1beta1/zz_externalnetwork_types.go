/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExternalNetworkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ExternalNetworkParameters struct {

	// Network friendly description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of IP scopes for the network.  See IP Scope below for details.
	// A list of IP scopes for the network
	// +kubebuilder:validation:Required
	IPScope []IPScopeParameters `json:"ipScope" tf:"ip_scope,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	// +kubebuilder:validation:Optional
	RetainNetInfoAcrossDeployments *bool `json:"retainNetInfoAcrossDeployments,omitempty" tf:"retain_net_info_across_deployments,omitempty"`

	// A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.
	// A list of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.
	// +kubebuilder:validation:Required
	VsphereNetwork []VsphereNetworkParameters `json:"vsphereNetwork" tf:"vsphere_network,omitempty"`
}

type IPScopeObservation struct {
}

type IPScopeParameters struct {

	// A FQDN for the virtual machines on this network.
	// DNS suffix
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Primary DNS server
	// Primary DNS server
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Secondary DNS server
	// Secondary DNS server
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// Gateway of the network
	// Gateway of the network
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// Network mask
	// Network mask
	// +kubebuilder:validation:Required
	Netmask *string `json:"netmask" tf:"netmask,omitempty"`

	// IP ranges used for static pool allocation in the network.  See IP Pool below for details.
	// IP ranges used for static pool allocation in the network
	// +kubebuilder:validation:Optional
	StaticIPPool []StaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type StaticIPPoolObservation struct {
}

type StaticIPPoolParameters struct {

	// End address of the IP range
	// End address of the IP range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// Start address of the IP range
	// Start address of the IP range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type VsphereNetworkObservation struct {
}

type VsphereNetworkParameters struct {

	// A unique name for the network
	// The name of the port group
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The vSphere type of the object. One of: DV_PORTGROUP (distributed virtual port group), NETWORK (standard switch port group)
	// The vSphere port group type. One of: DV_PORTGROUP (distributed virtual port group), NETWORK
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The vCenter server name
	// The vCenter server name
	// +kubebuilder:validation:Required
	Vcenter *string `json:"vcenter" tf:"vcenter,omitempty"`
}

// ExternalNetworkSpec defines the desired state of ExternalNetwork
type ExternalNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExternalNetworkParameters `json:"forProvider"`
}

// ExternalNetworkStatus defines the observed state of ExternalNetwork.
type ExternalNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExternalNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalNetwork is the Schema for the ExternalNetworks API. Provides a VMware Cloud Director external network resource.  This can be used to create and delete external networks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ExternalNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExternalNetworkSpec   `json:"spec"`
	Status            ExternalNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalNetworkList contains a list of ExternalNetworks
type ExternalNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExternalNetwork `json:"items"`
}

// Repository type metadata.
var (
	ExternalNetwork_Kind             = "ExternalNetwork"
	ExternalNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExternalNetwork_Kind}.String()
	ExternalNetwork_KindAPIVersion   = ExternalNetwork_Kind + "." + CRDGroupVersion.String()
	ExternalNetwork_GroupVersionKind = CRDGroupVersion.WithKind(ExternalNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&ExternalNetwork{}, &ExternalNetworkList{})
}
