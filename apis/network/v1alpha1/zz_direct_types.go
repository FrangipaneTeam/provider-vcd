/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DirectObservation struct {

	// (Computed) returns the DNS suffix from the external network
	// DNS suffix of the external network
	ExternalNetworkDNSSuffix *string `json:"externalNetworkDnsSuffix,omitempty" tf:"external_network_dns_suffix,omitempty"`

	// (Computed) returns the first DNS from the external network
	// Main DNS of the external network
	ExternalNetworkDns1 *string `json:"externalNetworkDns1,omitempty" tf:"external_network_dns1,omitempty"`

	// (Computed) returns the second DNS from the external network
	// Secondary DNS of the external network
	ExternalNetworkDns2 *string `json:"externalNetworkDns2,omitempty" tf:"external_network_dns2,omitempty"`

	// (Computed) returns the gateway from the external network
	// Gateway of the external network
	ExternalNetworkGateway *string `json:"externalNetworkGateway,omitempty" tf:"external_network_gateway,omitempty"`

	// (Computed) returns the netmask from the external network
	// Net mask of the external network
	ExternalNetworkNetmask *string `json:"externalNetworkNetmask,omitempty" tf:"external_network_netmask,omitempty"`

	// Network Hypertext Reference
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DirectParameters struct {

	// An optional description of the network
	// Optional description for the network
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the external network.
	// The name of the external network
	// +kubebuilder:validation:Required
	ExternalNetwork *string `json:"externalNetwork" tf:"external_network,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.
	// Key value map of metadata to assign to this network. Key and value can be any string
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Network
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to false.
	// Defines if this network is shared between multiple VDCs in the Org
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type MetadataEntryObservation struct {
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// DirectSpec defines the desired state of Direct
type DirectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DirectParameters `json:"forProvider"`
}

// DirectStatus defines the observed state of Direct.
type DirectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DirectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Direct is the Schema for the Directs API. Provides a VMware Cloud Director Org VDC Network attached to an external one. This can be used to create, modify, and delete internal networks for vApps to connect.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Direct struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DirectSpec   `json:"spec"`
	Status            DirectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DirectList contains a list of Directs
type DirectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Direct `json:"items"`
}

// Repository type metadata.
var (
	Direct_Kind             = "Direct"
	Direct_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Direct_Kind}.String()
	Direct_KindAPIVersion   = Direct_Kind + "." + CRDGroupVersion.String()
	Direct_GroupVersionKind = CRDGroupVersion.WithKind(Direct_Kind)
)

func init() {
	SchemeBuilder.Register(&Direct{}, &DirectList{})
}
