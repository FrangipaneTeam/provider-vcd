/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogObservation struct {

	// (v3.6+) Version number from this catalog.
	// Catalog version number.
	CatalogVersion *float64 `json:"catalogVersion,omitempty" tf:"catalog_version,omitempty"`

	// (v3.6+) Date and time of catalog creation
	// Time stamp of when the catalog was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Catalog HREF
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (v3.8.1+) Indicates if this catalog was created in the current organization.
	// True if this catalog belongs to the current organization.
	IsLocal *bool `json:"isLocal,omitempty" tf:"is_local,omitempty"`

	// (v3.6+) Indicates if this catalog is shared to all organizations.
	// True if this catalog is published.
	IsPublished *bool `json:"isPublished,omitempty" tf:"is_published,omitempty"`

	// (v3.6+) Indicates if the catalog is shared.
	// True if this catalog is shared.
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// (v3.8+) List of media item names in this catalog, in alphabetical order.
	// List of Media items in this catalog
	MediaItemList []*string `json:"mediaItemList,omitempty" tf:"media_item_list,omitempty"`

	// (v3.6+) Number of media items available in this catalog.
	// Number of Medias this catalog contains.
	NumberOfMedia *float64 `json:"numberOfMedia,omitempty" tf:"number_of_media,omitempty"`

	// (v3.6+) Number of vApp templates available in this catalog.
	// Number of vApps templates this catalog contains.
	NumberOfVappTemplates *float64 `json:"numberOfVappTemplates,omitempty" tf:"number_of_vapp_templates,omitempty"`

	// (v3.6+) Owner of the catalog.
	// Owner name from the catalog.
	OwnerName *string `json:"ownerName,omitempty" tf:"owner_name,omitempty"`

	// (v3.6+) Shows if the catalog is PUBLISHED, if it is a subscription from another one (SUBSCRIBED), or none of those (UNPUBLISHED).
	// PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.
	PublishSubscriptionType *string `json:"publishSubscriptionType,omitempty" tf:"publish_subscription_type,omitempty"`

	// (v3.8+) URL to which other catalogs can subscribe.
	// URL to which other catalogs can subscribe
	PublishSubscriptionURL *string `json:"publishSubscriptionUrl,omitempty" tf:"publish_subscription_url,omitempty"`

	// (v3.8+) List of vApp template names in this catalog, in alphabetical order.
	// List of catalog items in this catalog
	VappTemplateList []*string `json:"vappTemplateList,omitempty" tf:"vapp_template_list,omitempty"`
}

type CatalogParameters struct {

	// Enable early catalog export to optimize synchronization. Default is false. It is recommended to set it to true when publishing the catalog.
	// True enables early catalog export to optimize synchronization
	// +kubebuilder:validation:Optional
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled,omitempty"`

	// When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state
	// When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains, regardless of their state.
	// +kubebuilder:validation:Required
	DeleteForce *bool `json:"deleteForce" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal
	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal.
	// +kubebuilder:validation:Required
	DeleteRecursive *bool `json:"deleteRecursive" tf:"delete_recursive,omitempty"`

	// Description of catalog
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign.
	// Key and value pairs for catalog metadata.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Catalog
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Catalog name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
	// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
	// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is false.
	// Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary.
	// +kubebuilder:validation:Optional
	PreserveIdentityInformation *bool `json:"preserveIdentityInformation,omitempty" tf:"preserve_identity_information,omitempty"`

	// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is false.
	// True allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation.
	// +kubebuilder:validation:Optional
	PublishEnabled *bool `json:"publishEnabled,omitempty" tf:"publish_enabled,omitempty"`

	// Allows to set specific storage profile to be used for catalog. Note. Data
	// source vcd_storage_profile can help to lookup storage profile ID.
	// Optional storage profile ID
	// +kubebuilder:validation:Optional
	StorageProfileID *string `json:"storageProfileId,omitempty" tf:"storage_profile_id,omitempty"`
}

type MetadataEntryObservation struct {
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// CatalogSpec defines the desired state of Catalog
type CatalogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogParameters `json:"forProvider"`
}

// CatalogStatus defines the observed state of Catalog.
type CatalogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Catalog is the Schema for the Catalogs API. Provides a VMware Cloud Director catalog resource. This can be used to create and delete a catalog.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Catalog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CatalogSpec   `json:"spec"`
	Status            CatalogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogList contains a list of Catalogs
type CatalogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Catalog `json:"items"`
}

// Repository type metadata.
var (
	Catalog_Kind             = "Catalog"
	Catalog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Catalog_Kind}.String()
	Catalog_KindAPIVersion   = Catalog_Kind + "." + CRDGroupVersion.String()
	Catalog_GroupVersionKind = CRDGroupVersion.WithKind(Catalog_Kind)
)

func init() {
	SchemeBuilder.Register(&Catalog{}, &CatalogList{})
}
