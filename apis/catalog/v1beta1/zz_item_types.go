/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ItemMetadataEntryObservation struct {
}

type ItemMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ItemObservation struct {

	// Time stamp of when the item was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ItemParameters struct {

	// The name of the catalog where to upload OVA file
	// catalog name where upload the OVA file
	// +kubebuilder:validation:Required
	Catalog *string `json:"catalog" tf:"catalog,omitempty"`

	// (Deprecated; v3.7+) Use metadata_entry instead.  Key value map of metadata to assign to the Catalog Item
	// Key and value pairs for catalog item metadata
	// +kubebuilder:validation:Optional
	CatalogItemMetadata map[string]*string `json:"catalogItemMetadata,omitempty" tf:"catalog_item_metadata,omitempty"`

	// Description of item
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key value map of metadata to assign to the associated vApp Template
	// Key and value pairs for the metadata of the vApp template associated to this catalog item
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	// Metadata entries for the given Catalog Item
	// +kubebuilder:validation:Optional
	MetadataEntry []ItemMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Item name in catalog
	// catalog item name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to file to upload
	// Absolute or relative path to OVA
	// +kubebuilder:validation:Optional
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	// URL of OVF file
	// +kubebuilder:validation:Optional
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// - Default false. Allows seeing upload progress. (See note below)
	// shows upload progress in stdout
	// +kubebuilder:validation:Optional
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	// size of upload file piece size in mega bytes
	// +kubebuilder:validation:Optional
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

// ItemSpec defines the desired state of Item
type ItemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ItemParameters `json:"forProvider"`
}

// ItemStatus defines the observed state of Item.
type ItemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Item is the Schema for the Items API. Provides a VMware Cloud Director catalog item resource. This can be used to upload and delete OVA file inside a catalog.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Item struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ItemSpec   `json:"spec"`
	Status            ItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ItemList contains a list of Items
type ItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Item `json:"items"`
}

// Repository type metadata.
var (
	Item_Kind             = "Item"
	Item_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Item_Kind}.String()
	Item_KindAPIVersion   = Item_Kind + "." + CRDGroupVersion.String()
	Item_GroupVersionKind = CRDGroupVersion.WithKind(Item_Kind)
)

func init() {
	SchemeBuilder.Register(&Item{}, &ItemList{})
}
