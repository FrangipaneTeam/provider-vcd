/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VappTemplateMetadataEntryObservation struct {
}

type VappTemplateMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VappTemplateObservation struct {

	// Timestamp of when the vApp Template was created
	// Timestamp of when the vApp Template was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Set of VM names within the vApp template
	// Set of VM names within the vApp template
	VMNames []*string `json:"vmNames,omitempty" tf:"vm_names,omitempty"`

	// The VDC ID to which this vApp Template belongs
	// ID of the VDC to which the vApp Template belongs
	VdcID *string `json:"vdcId,omitempty" tf:"vdc_id,omitempty"`
}

type VappTemplateParameters struct {

	// ID of the Catalog where to upload the OVA file
	// ID of the Catalog where to upload the OVA file
	// +crossplane:generate:reference:type=Catalog
	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// Reference to a Catalog to populate catalogId.
	// +kubebuilder:validation:Optional
	CatalogIDRef *v1.Reference `json:"catalogIdRef,omitempty" tf:"-"`

	// Selector for a Catalog to populate catalogId.
	// +kubebuilder:validation:Optional
	CatalogIDSelector *v1.Selector `json:"catalogIdSelector,omitempty" tf:"-"`

	// Description of the vApp Template. Not to be used with ovf_url when target OVA has a description
	// Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated) Use metadata_entry instead. Key/value map of metadata to assign to the associated vApp Template
	// Key and value pairs for the metadata of this vApp Template
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given vApp Template
	// +kubebuilder:validation:Optional
	MetadataEntry []VappTemplateMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// vApp Template name in Catalog
	// vApp Template name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to file to upload
	// Absolute or relative path to OVA
	// +kubebuilder:validation:Optional
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	// URL of OVF file
	// +kubebuilder:validation:Optional
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
	// Size of upload file piece size in megabytes
	// +kubebuilder:validation:Optional
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

// VappTemplateSpec defines the desired state of VappTemplate
type VappTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VappTemplateParameters `json:"forProvider"`
}

// VappTemplateStatus defines the observed state of VappTemplate.
type VappTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VappTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VappTemplate is the Schema for the VappTemplates API. Provides a VMware Cloud Director vApp Template resource. This can be used to upload and delete OVA files inside a catalog.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VappTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VappTemplateSpec   `json:"spec"`
	Status            VappTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VappTemplateList contains a list of VappTemplates
type VappTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VappTemplate `json:"items"`
}

// Repository type metadata.
var (
	VappTemplate_Kind             = "VappTemplate"
	VappTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VappTemplate_Kind}.String()
	VappTemplate_KindAPIVersion   = VappTemplate_Kind + "." + CRDGroupVersion.String()
	VappTemplate_GroupVersionKind = CRDGroupVersion.WithKind(VappTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&VappTemplate{}, &VappTemplateList{})
}
