/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MediaMetadataEntryObservation struct {
}

type MediaMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MediaObservation struct {

	// (Computed) returns creation date
	// Creation date
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed) returns True if this media file is ISO
	// True if this media file is ISO
	IsIso *bool `json:"isIso,omitempty" tf:"is_iso,omitempty"`

	// (Computed) returns True if this media file is in a published catalog
	// True if this media file is in a published catalog
	IsPublished *bool `json:"isPublished,omitempty" tf:"is_published,omitempty"`

	// (Computed) returns owner name
	// Owner name
	OwnerName *string `json:"ownerName,omitempty" tf:"owner_name,omitempty"`

	// (Computed) returns media storage in Bytes
	// Media storage in Bytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// (Computed) returns media status
	// Media status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Computed) returns storage profile name
	// Storage profile name
	StorageProfileName *string `json:"storageProfileName,omitempty" tf:"storage_profile_name,omitempty"`
}

type MediaParameters struct {

	// The name of the catalog where to upload media file
	// catalog name where upload the Media file
	// +kubebuilder:validation:Required
	Catalog *string `json:"catalog" tf:"catalog,omitempty"`

	// - Description of media file
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - Absolute or relative path to file to upload
	// absolute or relative path to Media file
	// +kubebuilder:validation:Required
	MediaPath *string `json:"mediaPath" tf:"media_path,omitempty"`

	// (Deprecated; v2.5+) Use metadata_entry instead. Key value map of metadata to assign
	// Key and value pairs for catalog item metadata
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Catalog Media
	// +kubebuilder:validation:Optional
	MetadataEntry []MediaMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Media file name in catalog
	// media name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// - Default false. Allows to see upload progress. (See note below)
	// shows upload progress in stdout
	// +kubebuilder:validation:Optional
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// - size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	// size of upload file piece size in mega bytes
	// +kubebuilder:validation:Optional
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

// MediaSpec defines the desired state of Media
type MediaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MediaParameters `json:"forProvider"`
}

// MediaStatus defines the observed state of Media.
type MediaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MediaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Media is the Schema for the Medias API. Provides a VMware Cloud Director media resource. This can be used to upload and delete media (ISO) file inside a catalog.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Media struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaSpec   `json:"spec"`
	Status            MediaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaList contains a list of Medias
type MediaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Media `json:"items"`
}

// Repository type metadata.
var (
	Media_Kind             = "Media"
	Media_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Media_Kind}.String()
	Media_KindAPIVersion   = Media_Kind + "." + CRDGroupVersion.String()
	Media_GroupVersionKind = CRDGroupVersion.WithKind(Media_Kind)
)

func init() {
	SchemeBuilder.Register(&Media{}, &MediaList{})
}
