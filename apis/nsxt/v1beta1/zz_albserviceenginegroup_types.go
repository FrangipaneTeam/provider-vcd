/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBServiceEngineGroupObservation struct {

	// Number of deployed virtual services
	// NSX-T ALB Service Engine Group deployed virtual services
	DeployedVirtualServices *float64 `json:"deployedVirtualServices,omitempty" tf:"deployed_virtual_services,omitempty"`

	// defines High Availability Mode for Service Engine Group. One off:
	// NSX-T ALB Service Engine Group HA mode
	HaMode *string `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Maximum number of virtual services this NSX-T ALB Service Engine Group can run
	// NSX-T ALB Service Engine Group maximum virtual services
	MaxVirtualServices *float64 `json:"maxVirtualServices,omitempty" tf:"max_virtual_services,omitempty"`

	// Number of reserved virtual services
	// NSX-T ALB Service Engine Group reserved virtual services
	ReservedVirtualServices *float64 `json:"reservedVirtualServices,omitempty" tf:"reserved_virtual_services,omitempty"`
}

type ALBServiceEngineGroupParameters struct {

	// A reference NSX-T ALB Cloud. Can be looked up using vcd_nsxt_alb_cloud resource or data
	// source
	// NSX-T ALB backing Cloud ID
	// +crossplane:generate:reference:type=ALBCloud
	// +kubebuilder:validation:Optional
	ALBCloudID *string `json:"albCloudId,omitempty" tf:"alb_cloud_id,omitempty"`

	// Reference to a ALBCloud to populate albCloudId.
	// +kubebuilder:validation:Optional
	ALBCloudIDRef *v1.Reference `json:"albCloudIdRef,omitempty" tf:"-"`

	// Selector for a ALBCloud to populate albCloudId.
	// +kubebuilder:validation:Optional
	ALBCloudIDSelector *v1.Selector `json:"albCloudIdSelector,omitempty" tf:"-"`

	// An optional description NSX-T ALB Service Engine Group
	// NSX-T ALB Service Engine Group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of available Service Engine Group in ALB
	// NSX-T ALB Importable Service Engine Group Name
	// +kubebuilder:validation:Required
	ImportableServiceEngineGroupName *string `json:"importableServiceEngineGroupName" tf:"importable_service_engine_group_name,omitempty"`

	// Boolean value stating if there are more deployed virtual services than allocated ones
	// Boolean value that shows if virtual services are overallocated
	// +kubebuilder:validation:Optional
	Overallocated *bool `json:"overallocated,omitempty" tf:"overallocated,omitempty"`

	// Definition if the Service Engine Group is DEDICATED or SHARED
	// NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'
	// +kubebuilder:validation:Required
	ReservationModel *string `json:"reservationModel" tf:"reservation_model,omitempty"`

	// Feature set of this ALB Service Engine Group (STANDARD or PREMIUM)
	// Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.
	// +kubebuilder:validation:Optional
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// Note this may impact refresh performance, but should
	// ensure up-to-date information is read. Default is false.
	// Boolean value that shows if sync should be performed on every refresh
	// +kubebuilder:validation:Optional
	SyncOnRefresh *bool `json:"syncOnRefresh,omitempty" tf:"sync_on_refresh,omitempty"`
}

// ALBServiceEngineGroupSpec defines the desired state of ALBServiceEngineGroup
type ALBServiceEngineGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ALBServiceEngineGroupParameters `json:"forProvider"`
}

// ALBServiceEngineGroupStatus defines the observed state of ALBServiceEngineGroup.
type ALBServiceEngineGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ALBServiceEngineGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ALBServiceEngineGroup is the Schema for the ALBServiceEngineGroups API. Provides a resource to manage NSX-T ALB Service Engine Groups. A Service Engine Group is an isolation domain that also defines shared service engine properties, such as size, network access, and failover. Resources in a service engine group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared between different service engine groups.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ALBServiceEngineGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ALBServiceEngineGroupSpec   `json:"spec"`
	Status            ALBServiceEngineGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ALBServiceEngineGroupList contains a list of ALBServiceEngineGroups
type ALBServiceEngineGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ALBServiceEngineGroup `json:"items"`
}

// Repository type metadata.
var (
	ALBServiceEngineGroup_Kind             = "ALBServiceEngineGroup"
	ALBServiceEngineGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ALBServiceEngineGroup_Kind}.String()
	ALBServiceEngineGroup_KindAPIVersion   = ALBServiceEngineGroup_Kind + "." + CRDGroupVersion.String()
	ALBServiceEngineGroup_GroupVersionKind = CRDGroupVersion.WithKind(ALBServiceEngineGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ALBServiceEngineGroup{}, &ALBServiceEngineGroupList{})
}
