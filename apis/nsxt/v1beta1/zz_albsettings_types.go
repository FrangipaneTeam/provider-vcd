/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBSettingsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ALBSettingsParameters struct {

	// An ID of NSX-T Edge Gateway. Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway ID
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Reference to a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDRef *v1.Reference `json:"edgeGatewayIdRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDSelector *v1.Selector `json:"edgeGatewayIdSelector,omitempty" tf:"-"`

	// Boolean value true or false if ALB is enabled. Note Delete operation of this resource
	// will set it to false
	// Defines if ALB is enabled on Edge Gateway
	// +kubebuilder:validation:Required
	IsActive *bool `json:"isActive" tf:"is_active,omitempty"`

	// The name of organization to which the edge gateway belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Gateway CIDR format which will be used by Load Balancer service. All the
	// load balancer service engines associated with the Service Engine Group will be attached to this network. The subnet
	// prefix length must be 25. If nothing is set, the default is 192.168.255.125/25. This field cannot be updated
	// Optional custom network CIDR definition for ALB Service Engine placement (VCD default is 192.168.255.1/25)
	// +kubebuilder:validation:Optional
	ServiceNetworkSpecification *string `json:"serviceNetworkSpecification,omitempty" tf:"service_network_specification,omitempty"`

	// Feature set of this Edge Gateway if ALB is enabled (STANDARD or PREMIUM)
	// Feature set for ALB in this Edge Gateway. One of 'STANDARD', 'PREMIUM'.
	// +kubebuilder:validation:Optional
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// ALBSettingsSpec defines the desired state of ALBSettings
type ALBSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ALBSettingsParameters `json:"forProvider"`
}

// ALBSettingsStatus defines the observed state of ALBSettings.
type ALBSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ALBSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ALBSettings is the Schema for the ALBSettingss API. Provides a resource to manage NSX-T ALB General Settings for particular NSX-T Edge Gateway. One can activate or deactivate NSX-T ALB for a defined Edge Gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ALBSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ALBSettingsSpec   `json:"spec"`
	Status            ALBSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ALBSettingsList contains a list of ALBSettingss
type ALBSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ALBSettings `json:"items"`
}

// Repository type metadata.
var (
	ALBSettings_Kind             = "ALBSettings"
	ALBSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ALBSettings_Kind}.String()
	ALBSettings_KindAPIVersion   = ALBSettings_Kind + "." + CRDGroupVersion.String()
	ALBSettings_GroupVersionKind = CRDGroupVersion.WithKind(ALBSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&ALBSettings{}, &ALBSettingsList{})
}
