/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta1 "github.com/FrangipaneTeam/provider-vcd/apis/library/v1beta1"
	v1beta11 "github.com/FrangipaneTeam/provider-vcd/apis/org/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ALBCloud.
func (mg *ALBCloud) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ControllerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ControllerIDRef,
		Selector:     mg.Spec.ForProvider.ControllerIDSelector,
		To: reference.To{
			List:    &ALBControllerList{},
			Managed: &ALBController{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ControllerID")
	}
	mg.Spec.ForProvider.ControllerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ControllerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ALBEdgeGatewayServiceEngineGroup.
func (mg *ALBEdgeGatewayServiceEngineGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceEngineGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceEngineGroupIDRef,
		Selector:     mg.Spec.ForProvider.ServiceEngineGroupIDSelector,
		To: reference.To{
			List:    &ALBServiceEngineGroupList{},
			Managed: &ALBServiceEngineGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceEngineGroupID")
	}
	mg.Spec.ForProvider.ServiceEngineGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceEngineGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ALBPool.
func (mg *ALBPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ALBServiceEngineGroup.
func (mg *ALBServiceEngineGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ALBCloudID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ALBCloudIDRef,
		Selector:     mg.Spec.ForProvider.ALBCloudIDSelector,
		To: reference.To{
			List:    &ALBCloudList{},
			Managed: &ALBCloud{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ALBCloudID")
	}
	mg.Spec.ForProvider.ALBCloudID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ALBCloudIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ALBSettings.
func (mg *ALBSettings) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ALBVirtualService.
func (mg *ALBVirtualService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CACertificateID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CACertificateIDRef,
		Selector:     mg.Spec.ForProvider.CACertificateIDSelector,
		To: reference.To{
			List:    &v1beta1.CertificateList{},
			Managed: &v1beta1.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CACertificateID")
	}
	mg.Spec.ForProvider.CACertificateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CACertificateIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PoolIDRef,
		Selector:     mg.Spec.ForProvider.PoolIDSelector,
		To: reference.To{
			List:    &ALBPoolList{},
			Managed: &ALBPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PoolID")
	}
	mg.Spec.ForProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceEngineGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceEngineGroupIDRef,
		Selector:     mg.Spec.ForProvider.ServiceEngineGroupIDSelector,
		To: reference.To{
			List:    &ALBEdgeGatewayServiceEngineGroupList{},
			Managed: &ALBEdgeGatewayServiceEngineGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceEngineGroupID")
	}
	mg.Spec.ForProvider.ServiceEngineGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceEngineGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualIPAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VirtualIPAddressRef,
		Selector:     mg.Spec.ForProvider.VirtualIPAddressSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualIPAddress")
	}
	mg.Spec.ForProvider.VirtualIPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualIPAddressRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DistributedFirewall.
func (mg *DistributedFirewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Rule[i3].AppPortProfileIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.Rule[i3].AppPortProfileIdsRefs,
			Selector:      mg.Spec.ForProvider.Rule[i3].AppPortProfileIdsSelector,
			To: reference.To{
				List:    &AppPortProfileList{},
				Managed: &AppPortProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].AppPortProfileIds")
		}
		mg.Spec.ForProvider.Rule[i3].AppPortProfileIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Rule[i3].AppPortProfileIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Rule[i3].SourceIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.Rule[i3].SourceIdsRefs,
			Selector:      mg.Spec.ForProvider.Rule[i3].SourceIdsSelector,
			To: reference.To{
				List:    &IPSetList{},
				Managed: &IPSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].SourceIds")
		}
		mg.Spec.ForProvider.Rule[i3].SourceIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Rule[i3].SourceIdsRefs = mrsp.ResolvedReferences

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VdcGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VdcGroupIDRef,
		Selector:     mg.Spec.ForProvider.VdcGroupIDSelector,
		To: reference.To{
			List:    &v1beta11.GroupList{},
			Managed: &v1beta11.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VdcGroupID")
	}
	mg.Spec.ForProvider.VdcGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VdcGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DynamicSecurityGroup.
func (mg *DynamicSecurityGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VdcGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VdcGroupIDRef,
		Selector:     mg.Spec.ForProvider.VdcGroupIDSelector,
		To: reference.To{
			List:    &v1beta11.GroupList{},
			Managed: &v1beta11.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VdcGroupID")
	}
	mg.Spec.ForProvider.VdcGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VdcGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EdgeGateway.
func (mg *EdgeGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OwnerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OwnerIDRef,
		Selector:     mg.Spec.ForProvider.OwnerIDSelector,
		To: reference.To{
			List:    &v1beta11.GroupList{},
			Managed: &v1beta11.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OwnerID")
	}
	mg.Spec.ForProvider.OwnerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OwnerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EdgeGatewayBGPConfiguration.
func (mg *EdgeGatewayBGPConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EdgeGatewayBGPIPPrefixList.
func (mg *EdgeGatewayBGPIPPrefixList) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EdgeGatewayBGPNeighbor.
func (mg *EdgeGatewayBGPNeighbor) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InFilterIPPrefixListID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.InFilterIPPrefixListIDRef,
		Selector:     mg.Spec.ForProvider.InFilterIPPrefixListIDSelector,
		To: reference.To{
			List:    &EdgeGatewayBGPIPPrefixListList{},
			Managed: &EdgeGatewayBGPIPPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InFilterIPPrefixListID")
	}
	mg.Spec.ForProvider.InFilterIPPrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InFilterIPPrefixListIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OutFilterIPPrefixListID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OutFilterIPPrefixListIDRef,
		Selector:     mg.Spec.ForProvider.OutFilterIPPrefixListIDSelector,
		To: reference.To{
			List:    &EdgeGatewayBGPIPPrefixListList{},
			Managed: &EdgeGatewayBGPIPPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OutFilterIPPrefixListID")
	}
	mg.Spec.ForProvider.OutFilterIPPrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OutFilterIPPrefixListIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Firewall.
func (mg *Firewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IPSet.
func (mg *IPSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IpsecVPNTunnel.
func (mg *IpsecVPNTunnel) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LocalIPAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LocalIPAddressRef,
		Selector:     mg.Spec.ForProvider.LocalIPAddressSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LocalIPAddress")
	}
	mg.Spec.ForProvider.LocalIPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LocalIPAddressRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NATRule.
func (mg *NATRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExternalAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ExternalAddressRef,
		Selector:     mg.Spec.ForProvider.ExternalAddressSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ExternalAddress")
	}
	mg.Spec.ForProvider.ExternalAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ExternalAddressRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkImported.
func (mg *NetworkImported) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OwnerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OwnerIDRef,
		Selector:     mg.Spec.ForProvider.OwnerIDSelector,
		To: reference.To{
			List:    &v1beta11.GroupList{},
			Managed: &v1beta11.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OwnerID")
	}
	mg.Spec.ForProvider.OwnerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OwnerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityGroup.
func (mg *SecurityGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EdgeGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EdgeGatewayIDSelector,
		To: reference.To{
			List:    &EdgeGatewayList{},
			Managed: &EdgeGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeGatewayID")
	}
	mg.Spec.ForProvider.EdgeGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeGatewayIDRef = rsp.ResolvedReference

	return nil
}
