/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteAdvertisementObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouteAdvertisementParameters struct {

	// Define if route advertisement is active. Default true.
	// Defines if route advertisement is active
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organizations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Set of subnets that will be advertised to Tier-0 gateway. Leaving it empty means none.
	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	// +kubebuilder:validation:Optional
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

// RouteAdvertisementSpec defines the desired state of RouteAdvertisement
type RouteAdvertisementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteAdvertisementParameters `json:"forProvider"`
}

// RouteAdvertisementStatus defines the observed state of RouteAdvertisement.
type RouteAdvertisementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteAdvertisementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteAdvertisement is the Schema for the RouteAdvertisements API. Provides a VMware Cloud Director resource for setting route advertisement in an NSX-T Edge Gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type RouteAdvertisement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteAdvertisementSpec   `json:"spec"`
	Status            RouteAdvertisementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteAdvertisementList contains a list of RouteAdvertisements
type RouteAdvertisementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteAdvertisement `json:"items"`
}

// Repository type metadata.
var (
	RouteAdvertisement_Kind             = "RouteAdvertisement"
	RouteAdvertisement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteAdvertisement_Kind}.String()
	RouteAdvertisement_KindAPIVersion   = RouteAdvertisement_Kind + "." + CRDGroupVersion.String()
	RouteAdvertisement_GroupVersionKind = CRDGroupVersion.WithKind(RouteAdvertisement_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteAdvertisement{}, &RouteAdvertisementList{})
}
