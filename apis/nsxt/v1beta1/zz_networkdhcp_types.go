/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkDHCPObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkDHCPParameters struct {

	// - The DNS server IPs to be assigned by this
	// DHCP service. Maximum two values.
	// The DNS server IPs to be assigned by this DHCP service. 2 values maximum.
	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// - Lease time in seconds. Minimum value is 60s
	// and maximum is 4294967295s (~ 49 days).
	// Lease time in seconds
	// +kubebuilder:validation:Optional
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// IP address of DHCP server in network. Must match
	// subnet. Only used when mode=NETWORK.
	// IP Address of DHCP server in network. Only applicable when mode=NETWORK
	// +kubebuilder:validation:Optional
	ListenerIPAddress *string `json:"listenerIpAddress,omitempty" tf:"listener_ip_address,omitempty"`

	// One of EDGE, NETWORK or RELAY. Default is EDGE
	// DHCP mode. One of 'EDGE' (default), 'NETWORK', 'RELAY'
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks to define DHCP pool ranges. Must not be set when
	// mode=RELAY. See Pools and example for usage details.
	// IP ranges used for DHCP pool allocation in the network
	// +kubebuilder:validation:Optional
	Pool []PoolParameters `json:"pool,omitempty" tf:"pool,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type PoolObservation struct {
}

type PoolParameters struct {

	// End address of DHCP pool range
	// End address of DHCP pool IP range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// Start address of DHCP pool range
	// Start address of DHCP pool IP range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

// NetworkDHCPSpec defines the desired state of NetworkDHCP
type NetworkDHCPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkDHCPParameters `json:"forProvider"`
}

// NetworkDHCPStatus defines the observed state of NetworkDHCP.
type NetworkDHCPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkDHCPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDHCP is the Schema for the NetworkDHCPs API. Provides a resource to manage DHCP pools for NSX-T Org VDC networks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NetworkDHCP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkDHCPSpec   `json:"spec"`
	Status            NetworkDHCPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDHCPList contains a list of NetworkDHCPs
type NetworkDHCPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkDHCP `json:"items"`
}

// Repository type metadata.
var (
	NetworkDHCP_Kind             = "NetworkDHCP"
	NetworkDHCP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkDHCP_Kind}.String()
	NetworkDHCP_KindAPIVersion   = NetworkDHCP_Kind + "." + CRDGroupVersion.String()
	NetworkDHCP_GroupVersionKind = CRDGroupVersion.WithKind(NetworkDHCP_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkDHCP{}, &NetworkDHCPList{})
}
