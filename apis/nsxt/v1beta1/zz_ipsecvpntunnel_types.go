/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpsecVPNTunnelObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Provides more details of failure if the IKE service is not UP
	// Provides more details of failure if the IKE service is not UP
	IkeFailReason *string `json:"ikeFailReason,omitempty" tf:"ike_fail_reason,omitempty"`

	// Status for the actual IKE Session for the given tunnel
	// Status for the actual IKE Session for the given tunnel
	IkeServiceStatus *string `json:"ikeServiceStatus,omitempty" tf:"ike_service_status,omitempty"`

	// DEFAULT for system provided configuration or CUSTOM if security_profile_customization is set
	// Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some changes are applied
	SecurityProfile *string `json:"securityProfile,omitempty" tf:"security_profile,omitempty"`

	// Overall IPsec VPN Tunnel Status
	// Overall IPsec VPN Tunnel Status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type IpsecVPNTunnelParameters struct {

	// An optional description of the NSX-T IPsec VPN Tunnel
	// Description IP Sec VPN Tunnel
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway name in which IP Sec VPN configuration is located
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Reference to a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDRef *v1.Reference `json:"edgeGatewayIdRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDSelector *v1.Selector `json:"edgeGatewayIdSelector,omitempty" tf:"-"`

	// Enables or disables IPsec VPN Tunnel (default true)
	// Enables or disables this configuration (default true)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.
	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	LocalIPAddress *string `json:"localIpAddress,omitempty" tf:"local_ip_address,omitempty"`

	// Reference to a EdgeGateway to populate localIpAddress.
	// +kubebuilder:validation:Optional
	LocalIPAddressRef *v1.Reference `json:"localIpAddressRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate localIpAddress.
	// +kubebuilder:validation:Optional
	LocalIPAddressSelector *v1.Selector `json:"localIpAddressSelector,omitempty" tf:"-"`

	// A set of local networks in CIDR format. At least one value required
	// Set of local networks in CIDR format. At least one value is required
	// +kubebuilder:validation:Required
	LocalNetworks []*string `json:"localNetworks" tf:"local_networks,omitempty"`

	// Sets whether logging for the tunnel is enabled or not. (default - false)
	// Sets whether logging for the tunnel is enabled or not. (default - false)
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Pre-shared key for negotiation. Note the pre-shared key must be the same on the
	// other end of the IPSec VPN tunnel.
	// Pre-Shared Key (PSK)
	// +kubebuilder:validation:Required
	PreSharedKeySecretRef v1.SecretKeySelector `json:"preSharedKeySecretRef" tf:"-"`

	// Public IPv4 Address of the remote device terminating the VPN connection
	// Public IPv4 Address of the remote device terminating the VPN connection
	// +kubebuilder:validation:Required
	RemoteIPAddress *string `json:"remoteIpAddress" tf:"remote_ip_address,omitempty"`

	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	// +kubebuilder:validation:Optional
	RemoteNetworks []*string `json:"remoteNetworks,omitempty" tf:"remote_networks,omitempty"`

	// a block allowing to
	// customize default security profile parameters
	// Security profile customization
	// +kubebuilder:validation:Optional
	SecurityProfileCustomization []SecurityProfileCustomizationParameters `json:"securityProfileCustomization,omitempty" tf:"security_profile_customization,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type SecurityProfileCustomizationObservation struct {
}

type SecurityProfileCustomizationParameters struct {

	// Value in seconds of dead probe detection interval. Minimum is 3 seconds and the
	// maximum is 60 seconds
	// Value in seconds of dead probe detection interval. Minimum is 3 seconds and the maximum is 60 seconds
	// +kubebuilder:validation:Optional
	DpdProbeInternal *float64 `json:"dpdProbeInternal,omitempty" tf:"dpd_probe_internal,omitempty"`

	// Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of
	// GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	// Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	// +kubebuilder:validation:Required
	IkeDhGroups []*string `json:"ikeDhGroups" tf:"ike_dh_groups,omitempty"`

	// Secure hashing algorithms to use during the IKE negotiation. One of SHA1,
	// SHA2_256, SHA2_384, SHA2_512
	// Secure hashing algorithms to use during the IKE negotiation. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// +kubebuilder:validation:Optional
	IkeDigestAlgorithms []*string `json:"ikeDigestAlgorithms,omitempty" tf:"ike_digest_algorithms,omitempty"`

	// Encryption algorithms One of AES_128, AES_256, AES_GCM_128, AES_GCM_192,
	// AES_GCM_256
	// Encryption algorithms. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// +kubebuilder:validation:Required
	IkeEncryptionAlgorithms []*string `json:"ikeEncryptionAlgorithms" tf:"ike_encryption_algorithms,omitempty"`

	// Security association lifetime in seconds. It is number of seconds before the IPsec
	// tunnel needs to reestablish
	// Security Association life time (in seconds). It is number of seconds before the IPsec tunnel needs to reestablish
	// +kubebuilder:validation:Optional
	IkeSaLifetime *float64 `json:"ikeSaLifetime,omitempty" tf:"ike_sa_lifetime,omitempty"`

	// One of IKE_V1, IKE_V2, IKE_FLEX
	// IKE version one of IKE_V1, IKE_V2, IKE_FLEX
	// +kubebuilder:validation:Required
	IkeVersion *string `json:"ikeVersion" tf:"ike_version,omitempty"`

	// Policy for handling defragmentation bit. One of COPY, CLEAR
	// Policy for handling defragmentation bit. One of COPY, CLEAR
	// +kubebuilder:validation:Optional
	TunnelDfPolicy *string `json:"tunnelDfPolicy,omitempty" tf:"tunnel_df_policy,omitempty"`

	// Diffie-Hellman groups to be used is PFS is enabled.
	// One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	// Diffie-Hellman groups to be used is PFS is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	// +kubebuilder:validation:Required
	TunnelDhGroups []*string `json:"tunnelDhGroups" tf:"tunnel_dh_groups,omitempty"`

	// Digest algorithms to be used for message digest.
	// One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// Digest algorithms to be used for message digest. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// +kubebuilder:validation:Optional
	TunnelDigestAlgorithms []*string `json:"tunnelDigestAlgorithms,omitempty" tf:"tunnel_digest_algorithms,omitempty"`

	// Encryption algorithms to use in IPSec tunnel establishment.
	// One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128,
	// NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
	// Encryption algorithms to use in IPSec tunnel establishment. One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128, NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
	// +kubebuilder:validation:Required
	TunnelEncryptionAlgorithms []*string `json:"tunnelEncryptionAlgorithms" tf:"tunnel_encryption_algorithms,omitempty"`

	// PFS (Perfect Forward Secrecy) enabled or disabled.
	// Perfect Forward Secrecy Enabled or Disabled. Default (enabled)
	// +kubebuilder:validation:Optional
	TunnelPfsEnabled *bool `json:"tunnelPfsEnabled,omitempty" tf:"tunnel_pfs_enabled,omitempty"`

	// Security Association life time in seconds
	// Security Association life time (in seconds)
	// +kubebuilder:validation:Optional
	TunnelSaLifetime *float64 `json:"tunnelSaLifetime,omitempty" tf:"tunnel_sa_lifetime,omitempty"`
}

// IpsecVPNTunnelSpec defines the desired state of IpsecVPNTunnel
type IpsecVPNTunnelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpsecVPNTunnelParameters `json:"forProvider"`
}

// IpsecVPNTunnelStatus defines the observed state of IpsecVPNTunnel.
type IpsecVPNTunnelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpsecVPNTunnelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpsecVPNTunnel is the Schema for the IpsecVPNTunnels API. Provides a resource to manage NSX-T IPsec VPN Tunnel. You can configure site-to-site connectivity between an NSX-T Data Center Edge Gateway and remote sites. The remote sites must use NSX-T Data Center, have third-party hardware routers, or VPN gateways that support IPSec.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type IpsecVPNTunnel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpsecVPNTunnelSpec   `json:"spec"`
	Status            IpsecVPNTunnelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpsecVPNTunnelList contains a list of IpsecVPNTunnels
type IpsecVPNTunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpsecVPNTunnel `json:"items"`
}

// Repository type metadata.
var (
	IpsecVPNTunnel_Kind             = "IpsecVPNTunnel"
	IpsecVPNTunnel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpsecVPNTunnel_Kind}.String()
	IpsecVPNTunnel_KindAPIVersion   = IpsecVPNTunnel_Kind + "." + CRDGroupVersion.String()
	IpsecVPNTunnel_GroupVersionKind = CRDGroupVersion.WithKind(IpsecVPNTunnel_Kind)
)

func init() {
	SchemeBuilder.Register(&IpsecVPNTunnel{}, &IpsecVPNTunnelList{})
}
