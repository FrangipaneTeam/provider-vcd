/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NATRuleParameters struct {

	// Application Port Profile to which to apply the rule. The
	// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
	// gateway to connect to the internal network.  Can be looked up using vcd_nsxt_app_port_profile
	// data source or created using vcd_nsxt_app_port_profile resource
	// Application Port Profile to apply for this rule
	// +kubebuilder:validation:Optional
	AppPortProfileID *string `json:"appPortProfileId,omitempty" tf:"app_port_profile_id,omitempty"`

	// An optional description of the NAT rule
	// Description of NAT rule
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// For DNAT only. This represents the external port number or port range when doing
	// DNAT port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
	// for the given IPs selected will be translated.
	// For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
	// +kubebuilder:validation:Optional
	DnatExternalPort *string `json:"dnatExternalPort,omitempty" tf:"dnat_external_port,omitempty"`

	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway name in which NAT Rule is located
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Reference to a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDRef *v1.Reference `json:"edgeGatewayIdRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDSelector *v1.Selector `json:"edgeGatewayIdSelector,omitempty" tf:"-"`

	// Enables or disables NAT rule (default true)
	// Enables or disables this rule
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The external address for the NAT Rule. This must be supplied as a single IP or Network
	// CIDR. For a DNAT rule, this is the external facing IP Address for incoming traffic. For an SNAT rule, this is the
	// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
	// Edge Gateway. For a REFLEXIVE rule, these are the external facing IPs.
	// IP address or CIDR of external network
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	ExternalAddress *string `json:"externalAddress,omitempty" tf:"external_address,omitempty"`

	// Reference to a EdgeGateway to populate externalAddress.
	// +kubebuilder:validation:Optional
	ExternalAddressRef *v1.Reference `json:"externalAddressRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate externalAddress.
	// +kubebuilder:validation:Optional
	ExternalAddressSelector *v1.Selector `json:"externalAddressSelector,omitempty" tf:"-"`

	// You can set a firewall match rule to determine how
	// firewall is applied during NAT. One of MATCH_INTERNAL_ADDRESS, MATCH_EXTERNAL_ADDRESS,
	// BYPASS
	// VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
	// +kubebuilder:validation:Optional
	FirewallMatch *string `json:"firewallMatch,omitempty" tf:"firewall_match,omitempty"`

	// The internal address for the NAT Rule. This must be supplied as a single IP or
	// Network CIDR. For a DNAT rule, this is the internal IP address for incoming traffic. For an SNAT rule, this is the
	// internal IP Address for outgoing traffic. For a REFLEXIVE rule, these are the internal IPs.
	// These IPs are typically the Private IPs that are allocated to workloads.
	// IP address or CIDR of the virtual machines for which you are configuring NAT
	// +kubebuilder:validation:Optional
	InternalAddress *string `json:"internalAddress,omitempty" tf:"internal_address,omitempty"`

	// Enable to have the address translation performed by this rule logged
	// (default false). Note User might lack rights (Organization Administrator role by default
	// is missing Gateway -> Configure System Logging right) to enable logging, but API does not
	// return error and it is not possible to validate it.
	// Enable logging when this rule is applied
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// if an address has multiple NAT rules, you can assign these
	// rules different priorities to determine the order in which they are applied. A lower value means a
	// higher priority for this rule.
	// VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a higher precedence for this rule.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// One of DNAT, NO_DNAT, SNAT, NO_SNAT, REFLEXIVE
	// Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
	// +kubebuilder:validation:Required
	RuleType *string `json:"ruleType" tf:"rule_type,omitempty"`

	// For SNAT only. The destination addresses to match in the SNAT Rule. This
	// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
	// destination network.
	// For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain or an IP address range in CIDR format.
	// +kubebuilder:validation:Optional
	SnatDestinationAddress *string `json:"snatDestinationAddress,omitempty" tf:"snat_destination_address,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// NATRuleSpec defines the desired state of NATRule
type NATRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATRuleParameters `json:"forProvider"`
}

// NATRuleStatus defines the observed state of NATRule.
type NATRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NATRule is the Schema for the NATRules API. Provides a resource to manage NSX-T NAT rules. To change the source IP address from a private to a public IP address, you create a source NAT (SNAT) rule. To change the destination IP address from a public to a private IP address, you create a destination NAT (DNAT) rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NATRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATRuleSpec   `json:"spec"`
	Status            NATRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATRuleList contains a list of NATRules
type NATRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATRule `json:"items"`
}

// Repository type metadata.
var (
	NATRule_Kind             = "NATRule"
	NATRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATRule_Kind}.String()
	NATRule_KindAPIVersion   = NATRule_Kind + "." + CRDGroupVersion.String()
	NATRule_GroupVersionKind = CRDGroupVersion.WithKind(NATRule_Kind)
)

func init() {
	SchemeBuilder.Register(&NATRule{}, &NATRuleList{})
}
