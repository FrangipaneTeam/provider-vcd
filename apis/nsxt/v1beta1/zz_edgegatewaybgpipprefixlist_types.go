/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgeGatewayBGPIPPrefixListObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EdgeGatewayBGPIPPrefixListParameters struct {

	// Description of IP Prefix List
	// BGP IP Prefix List description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// vcd_nsxt_edgegateway datasource
	// Edge gateway ID for BGP IP Prefix List Configuration
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Reference to a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDRef *v1.Reference `json:"edgeGatewayIdRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDSelector *v1.Selector `json:"edgeGatewayIdSelector,omitempty" tf:"-"`

	// At least one ip_prefix definition. See IP Prefix for
	// definition structure.
	// BGP IP Prefix List entry
	// +kubebuilder:validation:Required
	IPPrefix []IPPrefixParameters `json:"ipPrefix" tf:"ip_prefix,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

type IPPrefixObservation struct {
}

type IPPrefixParameters struct {

	// Can be PERMIT or DENY
	// Action 'PERMIT' or 'DENY'
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// Greater than or equal to (ge) subnet mask to match. For
	// example, 192.168.100.3/27 ge 26 le 32 modifiers match subnet masks greater than or equal to
	// 26-bits and less than or equal to 32-bits in length.
	// Greater than or equal to subnet mask
	// +kubebuilder:validation:Optional
	GreaterThanOrEqualTo *float64 `json:"greaterThanOrEqualTo,omitempty" tf:"greater_than_or_equal_to,omitempty"`

	// Less than or equal to (le) subnet mask to match. For example,
	// 192.168.100.3/27 ge 26 le 32 modifiers match subnet masks greater than or equal to 26-bits and
	// less than or equal to 32-bits in length.
	// Less than or equal to subnet mask
	// +kubebuilder:validation:Optional
	LessThanOrEqualTo *float64 `json:"lessThanOrEqualTo,omitempty" tf:"less_than_or_equal_to,omitempty"`

	// Network information should be in CIDR notation. (e.g. IPv4
	// 192.168.100.0/24, IPv6 2001:db8::/48)
	// Network in CIDR notation (e.g. '192.168.100.0/24', '2001:db8::/48')
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`
}

// EdgeGatewayBGPIPPrefixListSpec defines the desired state of EdgeGatewayBGPIPPrefixList
type EdgeGatewayBGPIPPrefixListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeGatewayBGPIPPrefixListParameters `json:"forProvider"`
}

// EdgeGatewayBGPIPPrefixListStatus defines the observed state of EdgeGatewayBGPIPPrefixList.
type EdgeGatewayBGPIPPrefixListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeGatewayBGPIPPrefixListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeGatewayBGPIPPrefixList is the Schema for the EdgeGatewayBGPIPPrefixLists API. Provides a resource to manage NSX-T Edge Gateway BGP IP Prefix Lists. IP prefix lists can contain single or multiple IP addresses and can be used to assign BGP neighbors with access permissions for route advertisement.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type EdgeGatewayBGPIPPrefixList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EdgeGatewayBGPIPPrefixListSpec   `json:"spec"`
	Status            EdgeGatewayBGPIPPrefixListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeGatewayBGPIPPrefixListList contains a list of EdgeGatewayBGPIPPrefixLists
type EdgeGatewayBGPIPPrefixListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeGatewayBGPIPPrefixList `json:"items"`
}

// Repository type metadata.
var (
	EdgeGatewayBGPIPPrefixList_Kind             = "EdgeGatewayBGPIPPrefixList"
	EdgeGatewayBGPIPPrefixList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeGatewayBGPIPPrefixList_Kind}.String()
	EdgeGatewayBGPIPPrefixList_KindAPIVersion   = EdgeGatewayBGPIPPrefixList_Kind + "." + CRDGroupVersion.String()
	EdgeGatewayBGPIPPrefixList_GroupVersionKind = CRDGroupVersion.WithKind(EdgeGatewayBGPIPPrefixList_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeGatewayBGPIPPrefixList{}, &EdgeGatewayBGPIPPrefixListList{})
}
