/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBCloudObservation struct {

	// DetailedHealthMessage contains detailed message on the health of the Cloud
	// NSX-T ALB Cloud detailed health message
	HealthMessage *string `json:"healthMessage,omitempty" tf:"health_message,omitempty"`

	// HealthStatus contains status of the Load Balancer Cloud. Possible values are:
	// NSX-T ALB Cloud health status
	HealthStatus *string `json:"healthStatus,omitempty" tf:"health_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Network Pool Name used by the Cloud
	// Network pool name of NSX-T ALB Cloud
	NetworkPoolName *string `json:"networkPoolName,omitempty" tf:"network_pool_name,omitempty"`
}

type ALBCloudParameters struct {

	// ALB Controller ID
	// NSX-T ALB Controller ID
	// +crossplane:generate:reference:type=ALBController
	// +kubebuilder:validation:Optional
	ControllerID *string `json:"controllerId,omitempty" tf:"controller_id,omitempty"`

	// Reference to a ALBController to populate controllerId.
	// +kubebuilder:validation:Optional
	ControllerIDRef *v1.Reference `json:"controllerIdRef,omitempty" tf:"-"`

	// Selector for a ALBController to populate controllerId.
	// +kubebuilder:validation:Optional
	ControllerIDSelector *v1.Selector `json:"controllerIdSelector,omitempty" tf:"-"`

	// An optional description NSX-T ALB Cloud
	// NSX-T ALB Cloud description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Importable Cloud ID. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// NSX-T ALB Importable Cloud ID
	// +kubebuilder:validation:Required
	ImportableCloudID *string `json:"importableCloudId" tf:"importable_cloud_id,omitempty"`

	// Network pool ID for ALB Cloud. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// Network pool ID for NSX-T ALB Importable Cloud
	// +kubebuilder:validation:Required
	NetworkPoolID *string `json:"networkPoolId" tf:"network_pool_id,omitempty"`
}

// ALBCloudSpec defines the desired state of ALBCloud
type ALBCloudSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ALBCloudParameters `json:"forProvider"`
}

// ALBCloudStatus defines the observed state of ALBCloud.
type ALBCloudStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ALBCloudObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ALBCloud is the Schema for the ALBClouds API. Provides a resource to manage NSX-T ALB Clouds for Providers. An NSX-T Cloud is a service provider-level construct that consists of an NSX-T Manager and an NSX-T Data Center transport zone.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ALBCloud struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ALBCloudSpec   `json:"spec"`
	Status            ALBCloudStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ALBCloudList contains a list of ALBClouds
type ALBCloudList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ALBCloud `json:"items"`
}

// Repository type metadata.
var (
	ALBCloud_Kind             = "ALBCloud"
	ALBCloud_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ALBCloud_Kind}.String()
	ALBCloud_KindAPIVersion   = ALBCloud_Kind + "." + CRDGroupVersion.String()
	ALBCloud_GroupVersionKind = CRDGroupVersion.WithKind(ALBCloud_Kind)
)

func init() {
	SchemeBuilder.Register(&ALBCloud{}, &ALBCloudList{})
}
