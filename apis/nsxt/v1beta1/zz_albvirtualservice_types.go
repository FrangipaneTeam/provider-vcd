/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBVirtualServiceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ALBVirtualServiceParameters struct {

	// One of HTTP, HTTPS, L4, L4_TLS.
	// HTTP, HTTPS, L4, L4_TLS
	// +kubebuilder:validation:Required
	ApplicationProfileType *string `json:"applicationProfileType" tf:"application_profile_type,omitempty"`

	// ID reference of CA certificate. Required when application_profile_type is HTTPS
	// or L4_TLS
	// Optional certificate ID to use for exposing service
	// +kubebuilder:validation:Optional
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// An optional description NSX-T ALB Virtual Service
	// Description of ALB Virtual Service
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An ID of NSX-T Edge Gateway. Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway ID in which ALB Pool should be created
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Reference to a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDRef *v1.Reference `json:"edgeGatewayIdRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate edgeGatewayId.
	// +kubebuilder:validation:Optional
	EdgeGatewayIDSelector *v1.Selector `json:"edgeGatewayIdSelector,omitempty" tf:"-"`

	// Virtual Service is enabled or disabled (default true)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A reference to NSX-T ALB Pool. Can be looked up using vcd_nsxt_alb_pool resource or data
	// source
	// Pool ID
	// +crossplane:generate:reference:type=ALBPool
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Reference to a ALBPool to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDRef *v1.Reference `json:"poolIdRef,omitempty" tf:"-"`

	// Selector for a ALBPool to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDSelector *v1.Selector `json:"poolIdSelector,omitempty" tf:"-"`

	// A reference to NSX-T ALB Service Engine Group. Can be looked up using
	// vcd_nsxt_alb_edgegateway_service_engine_group resource or data source
	// Service Engine Group ID
	// +crossplane:generate:reference:type=ALBEdgeGatewayServiceEngineGroup
	// +kubebuilder:validation:Optional
	ServiceEngineGroupID *string `json:"serviceEngineGroupId,omitempty" tf:"service_engine_group_id,omitempty"`

	// Reference to a ALBEdgeGatewayServiceEngineGroup to populate serviceEngineGroupId.
	// +kubebuilder:validation:Optional
	ServiceEngineGroupIDRef *v1.Reference `json:"serviceEngineGroupIdRef,omitempty" tf:"-"`

	// Selector for a ALBEdgeGatewayServiceEngineGroup to populate serviceEngineGroupId.
	// +kubebuilder:validation:Optional
	ServiceEngineGroupIDSelector *v1.Selector `json:"serviceEngineGroupIdSelector,omitempty" tf:"-"`

	// A block to define port, port range and traffic type. Multiple can be used. See
	// service_port and example for usage details.
	// +kubebuilder:validation:Optional
	ServicePort []ServicePortParameters `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`

	// IP Address for the service to listen on.
	// Virtual IP address (VIP) for Virtual Service
	// +crossplane:generate:reference:type=EdgeGateway
	// +kubebuilder:validation:Optional
	VirtualIPAddress *string `json:"virtualIpAddress,omitempty" tf:"virtual_ip_address,omitempty"`

	// Reference to a EdgeGateway to populate virtualIpAddress.
	// +kubebuilder:validation:Optional
	VirtualIPAddressRef *v1.Reference `json:"virtualIpAddressRef,omitempty" tf:"-"`

	// Selector for a EdgeGateway to populate virtualIpAddress.
	// +kubebuilder:validation:Optional
	VirtualIPAddressSelector *v1.Selector `json:"virtualIpAddressSelector,omitempty" tf:"-"`
}

type ServicePortObservation struct {
}

type ServicePortParameters struct {

	// Only required to specify port range and is not needed for single port values
	// Last port in the range
	// +kubebuilder:validation:Optional
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Must be enabled if CA certificate is to be used for this port. Default false
	// Defines if certificate should be used
	// +kubebuilder:validation:Optional
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// Starting port in the range or exact port number
	// Starting port in the range
	// +kubebuilder:validation:Required
	StartPort *float64 `json:"startPort" tf:"start_port,omitempty"`

	// One of TCP_PROXY, TCP_FAST_PATH, UDP_FAST_PATH
	// One of 'TCP_PROXY', 'TCP_FAST_PATH', 'UDP_FAST_PATH'
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ALBVirtualServiceSpec defines the desired state of ALBVirtualService
type ALBVirtualServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ALBVirtualServiceParameters `json:"forProvider"`
}

// ALBVirtualServiceStatus defines the observed state of ALBVirtualService.
type ALBVirtualServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ALBVirtualServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ALBVirtualService is the Schema for the ALBVirtualServices API. Provides a resource to manage NSX-T ALB Virtual services for particular NSX-T Edge Gateway. A virtual service advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives traffic, it directs it to members in ALB Pool.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ALBVirtualService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ALBVirtualServiceSpec   `json:"spec"`
	Status            ALBVirtualServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ALBVirtualServiceList contains a list of ALBVirtualServices
type ALBVirtualServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ALBVirtualService `json:"items"`
}

// Repository type metadata.
var (
	ALBVirtualService_Kind             = "ALBVirtualService"
	ALBVirtualService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ALBVirtualService_Kind}.String()
	ALBVirtualService_KindAPIVersion   = ALBVirtualService_Kind + "." + CRDGroupVersion.String()
	ALBVirtualService_GroupVersionKind = CRDGroupVersion.WithKind(ALBVirtualService_Kind)
)

func init() {
	SchemeBuilder.Register(&ALBVirtualService{}, &ALBVirtualServiceList{})
}
