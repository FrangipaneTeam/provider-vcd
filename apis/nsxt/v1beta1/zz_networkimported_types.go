/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkImportedObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of an existing NSX-T segment
	// ID of existing NSX-T Logical Switch
	NsxtLogicalSwitchID *string `json:"nsxtLogicalSwitchId,omitempty" tf:"nsxt_logical_switch_id,omitempty"`
}

type NetworkImportedParameters struct {

	// A FQDN for the virtual machines on this network
	// DNS suffix
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// An optional description of the network
	// Network description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// First DNS server to use.
	// DNS server 1
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Second DNS server to use.
	// DNS server 1
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// The gateway for this network (e.g. 192.168.1.1)
	// Gateway IP address
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// Unique name of an existing NSX-T segment.
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in nsxt_logical_switch_id attribute.
	// Name of existing NSX-T Logical Switch
	// +kubebuilder:validation:Required
	NsxtLogicalSwitchName *string `json:"nsxtLogicalSwitchName" tf:"nsxt_logical_switch_name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
	// and inherited from provider configuration)
	// ID of VDC or VDC Group
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/org/v1beta1.Group
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// Reference to a Group in org to populate ownerId.
	// +kubebuilder:validation:Optional
	OwnerIDRef *v1.Reference `json:"ownerIdRef,omitempty" tf:"-"`

	// Selector for a Group in org to populate ownerId.
	// +kubebuilder:validation:Optional
	OwnerIDSelector *v1.Selector `json:"ownerIdSelector,omitempty" tf:"-"`

	// The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
	// Network prefix
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	// IP ranges used for static pool allocation in the network
	// +kubebuilder:validation:Optional
	StaticIPPool []StaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
	// owner_id which supports VDC and VDC Group IDs.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type StaticIPPoolObservation struct {
}

type StaticIPPoolParameters struct {

	// The final address in the IP Range
	// End address of the IP range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

// NetworkImportedSpec defines the desired state of NetworkImported
type NetworkImportedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkImportedParameters `json:"forProvider"`
}

// NetworkImportedStatus defines the observed state of NetworkImported.
type NetworkImportedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkImportedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkImported is the Schema for the NetworkImporteds API. Provides a VMware Cloud Director Org VDC NSX-T Imported Network type. This can be used to create, modify, and delete NSX-T VDC networks of Imported type (backed by NSX-T).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NetworkImported struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkImportedSpec   `json:"spec"`
	Status            NetworkImportedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkImportedList contains a list of NetworkImporteds
type NetworkImportedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkImported `json:"items"`
}

// Repository type metadata.
var (
	NetworkImported_Kind             = "NetworkImported"
	NetworkImported_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkImported_Kind}.String()
	NetworkImported_KindAPIVersion   = NetworkImported_Kind + "." + CRDGroupVersion.String()
	NetworkImported_GroupVersionKind = CRDGroupVersion.WithKind(NetworkImported_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkImported{}, &NetworkImportedList{})
}
