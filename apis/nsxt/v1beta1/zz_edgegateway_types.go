/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocatedIpsObservation struct {
}

type AllocatedIpsParameters struct {

	// - End IP address of a range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// - Start IP address of a range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type EdgeGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// - Primary IP address for edge gateway. Note: primary_ip must fall into allocated_ips
	// block range as otherwise plan will not be clean with a new range defined for that particular block. There can only
	// be one primary_ip defined for edge gateway.
	// Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

type EdgeGatewayParameters struct {

	// Dedicating the External Network will enable Route Advertisement for this Edge Gateway. Default false.
	// Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
	// +kubebuilder:validation:Optional
	DedicateExternalNetwork *bool `json:"dedicateExternalNetwork,omitempty" tf:"dedicate_external_network,omitempty"`

	// A unique name for the edge gateway.
	// Edge Gateway description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specific Edge Cluster ID if required
	// Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
	// +kubebuilder:validation:Optional
	EdgeClusterID *string `json:"edgeClusterId,omitempty" tf:"edge_cluster_id,omitempty"`

	// An external network ID. Note: Data source vcd_external_network_v2
	// can be used to lookup ID by name.
	// External network ID
	// +kubebuilder:validation:Required
	ExternalNetworkID *string `json:"externalNetworkId" tf:"external_network_id,omitempty"`

	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of VDC or VDC Group. Note: Data sources
	// vcd_vdc_group or
	// vcd_org_vdc can be used to lookup IDs by
	// name
	// ID of VDC or VDC Group
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/org/v1beta1.Group
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// Reference to a Group in org to populate ownerId.
	// +kubebuilder:validation:Optional
	OwnerIDRef *v1.Reference `json:"ownerIdRef,omitempty" tf:"-"`

	// Selector for a Group in org to populate ownerId.
	// +kubebuilder:validation:Optional
	OwnerIDSelector *v1.Selector `json:"ownerIdSelector,omitempty" tf:"-"`

	// If owner_id is a VDC Group, by default Edge
	// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
	// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
	// Group) Note: It can only be used when owner_id is a VDC Group.
	// Optional ID of starting VDC if the 'owner_id' is a VDC Group
	// +kubebuilder:validation:Optional
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`

	// One or more subnets defined for edge gateway.
	// One or more blocks with external network information to be attached to this gateway's interface
	// +kubebuilder:validation:Required
	Subnet []SubnetParameters `json:"subnet" tf:"subnet,omitempty"`

	// Deprecated in favor of owner_id. The name of VDC that owns the edge
	// gateway. Can be inherited from provider configuration if not defined here.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type SubnetObservation struct {
}

type SubnetParameters struct {

	// One or more blocks of ip ranges in the subnet to be
	// allocated
	// Define one or more blocks to sub-allocate pools on the edge gateway
	// +kubebuilder:validation:Required
	AllocatedIps []AllocatedIpsParameters `json:"allocatedIps" tf:"allocated_ips,omitempty"`

	// - Gateway for a subnet in external network
	// Gateway address for a subnet
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// - Prefix length of a subnet in external network (e.g. 24 for netmask of 255.255.255.0)
	// Netmask address for a subnet (e.g. 24 for /24)
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// - Primary IP address for edge gateway. Note: primary_ip must fall into allocated_ips
	// block range as otherwise plan will not be clean with a new range defined for that particular block. There can only
	// be one primary_ip defined for edge gateway.
	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	// +kubebuilder:validation:Optional
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

// EdgeGatewaySpec defines the desired state of EdgeGateway
type EdgeGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeGatewayParameters `json:"forProvider"`
}

// EdgeGatewayStatus defines the observed state of EdgeGateway.
type EdgeGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeGateway is the Schema for the EdgeGateways API. Provides a VMware Cloud Director NSX-T edge gateway. This can be used to create, update, and delete NSX-T edge gateways connected to external networks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type EdgeGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EdgeGatewaySpec   `json:"spec"`
	Status            EdgeGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeGatewayList contains a list of EdgeGateways
type EdgeGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeGateway `json:"items"`
}

// Repository type metadata.
var (
	EdgeGateway_Kind             = "EdgeGateway"
	EdgeGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeGateway_Kind}.String()
	EdgeGateway_KindAPIVersion   = EdgeGateway_Kind + "." + CRDGroupVersion.String()
	EdgeGateway_GroupVersionKind = CRDGroupVersion.WithKind(EdgeGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeGateway{}, &EdgeGatewayList{})
}
