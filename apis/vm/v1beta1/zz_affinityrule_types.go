/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AffinityRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AffinityRuleParameters struct {

	// True if this affinity rule is enabled. The default is true
	// True if this affinity rule is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One of Affinity or Anti-Affinity. This property cannot be changed. Once created, if we
	// need to change polarity, we need to remove the rule and create a new one.
	// One of 'Affinity', 'Anti-Affinity'
	// +kubebuilder:validation:Required
	Polarity *string `json:"polarity" tf:"polarity,omitempty"`

	// True if this affinity rule is required. When a rule is mandatory, a host failover will not
	// power on the VM if doing so would violate the rule. The default is true
	// True if this affinity rule is required. When a rule is mandatory, a host failover will not power on the VM if doing so would violate the rule
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
	// Set of VM IDs assigned to this rule
	// +kubebuilder:validation:Required
	VMIds []*string `json:"vmIds" tf:"vm_ids,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// AffinityRuleSpec defines the desired state of AffinityRule
type AffinityRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AffinityRuleParameters `json:"forProvider"`
}

// AffinityRuleStatus defines the observed state of AffinityRule.
type AffinityRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AffinityRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AffinityRule is the Schema for the AffinityRules API. Provides a VMware Cloud Director VM affinity rule resource. This can be used to create, modify, and delete VM affinity and anti-affinity rules.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type AffinityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AffinityRuleSpec   `json:"spec"`
	Status            AffinityRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AffinityRuleList contains a list of AffinityRules
type AffinityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AffinityRule `json:"items"`
}

// Repository type metadata.
var (
	AffinityRule_Kind             = "AffinityRule"
	AffinityRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AffinityRule_Kind}.String()
	AffinityRule_KindAPIVersion   = AffinityRule_Kind + "." + CRDGroupVersion.String()
	AffinityRule_GroupVersionKind = CRDGroupVersion.WithKind(AffinityRule_Kind)
)

func init() {
	SchemeBuilder.Register(&AffinityRule{}, &AffinityRuleList{})
}
