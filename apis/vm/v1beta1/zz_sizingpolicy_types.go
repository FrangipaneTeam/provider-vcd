/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CPUObservation struct {
}

type CPUParameters struct {

	// The number of cores per socket for a VM. This is a VM hardware configuration. The number of vCPUs that is defined in the VM sizing policy must be divisible by the number of cores per socket. If the number of vCPUs is not divisible by the number of cores per socket, the number of cores per socket becomes invalid.
	// The number of cores per socket for a VM. This is a VM hardware configuration. The number of vCPUs that is defined in the VM sizing policy must be divisible by the number of cores per socket. If the number of vCPUs is not divisible by the number of cores per socket, the number of cores per socket becomes invalid.
	// +kubebuilder:validation:Optional
	CoresPerSocket *string `json:"coresPerSocket,omitempty" tf:"cores_per_socket,omitempty"`

	// Defines the number of vCPUs configured for a VM. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, this count becomes the configured number of vCPUs for the VM.
	// Defines the number of vCPUs configured for a VM. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, this count becomes the configured number of vCPUs for the VM.
	// +kubebuilder:validation:Optional
	Count *string `json:"count,omitempty" tf:"count,omitempty"`

	// Defines the CPU limit in MHz for a VM. If not defined in the VDC compute policy, CPU limit is equal to the vCPU speed multiplied by the number of vCPUs.
	// Defines the CPU limit in MHz for a VM. If not defined in the VDC compute policy, CPU limit is equal to the vCPU speed multiplied by the number of vCPUs.
	// +kubebuilder:validation:Optional
	LimitInMhz *string `json:"limitInMhz,omitempty" tf:"limit_in_mhz,omitempty"`

	// Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.
	// Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.
	// +kubebuilder:validation:Optional
	ReservationGuarantee *string `json:"reservationGuarantee,omitempty" tf:"reservation_guarantee,omitempty"`

	// Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	// Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	// +kubebuilder:validation:Optional
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Defines the vCPU speed of a core in MHz.
	// Defines the vCPU speed of a core in MHz.
	// +kubebuilder:validation:Optional
	SpeedInMhz *string `json:"speedInMhz,omitempty" tf:"speed_in_mhz,omitempty"`
}

type MemoryObservation struct {
}

type MemoryParameters struct {

	// Defines the memory limit in MB for a VM. If not defined in the VM sizing policy, memory limit is equal to the allocated memory for the VM.
	// Defines the memory limit in MB for a VM. If not defined in the VM sizing policy, memory limit is equal to the allocated memory for the VM.
	// +kubebuilder:validation:Optional
	LimitInMb *string `json:"limitInMb,omitempty" tf:"limit_in_mb,omitempty"`

	// Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.
	// Defines the reserved amount of memory that is configured for a VM. The value of the attribute ranges between 0 and one. Value of 0 memory reservation guarantee defines no memory reservation. Value of 1 defines 100% of memory reserved.
	// +kubebuilder:validation:Optional
	ReservationGuarantee *string `json:"reservationGuarantee,omitempty" tf:"reservation_guarantee,omitempty"`

	// Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	// Defines the number of memory shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of memory as another VM, it is entitled to consume twice as much memory when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	// +kubebuilder:validation:Optional
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Defines the memory configured for a VM in MB. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, the VM receives the amount of memory defined by this attribute.
	// Defines the memory configured for a VM in MB. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, the VM receives the amount of memory defined by this attribute.
	// +kubebuilder:validation:Optional
	SizeInMb *string `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`
}

type SizingPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SizingPolicyParameters struct {

	// Configures cpu policy; see Cpu below for details.
	// +kubebuilder:validation:Optional
	CPU []CPUParameters `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// description of VM sizing policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configures memory policy; see Memory below for details.
	// +kubebuilder:validation:Optional
	Memory []MemoryParameters `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of organization to use - Deprecated and unneeded: will be ignored if used
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

// SizingPolicySpec defines the desired state of SizingPolicy
type SizingPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SizingPolicyParameters `json:"forProvider"`
}

// SizingPolicyStatus defines the observed state of SizingPolicy.
type SizingPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SizingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SizingPolicy is the Schema for the SizingPolicys API. Provides a VMware Cloud Director VM sizing policy resource. This can be used to create, modify, and delete VM sizing policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type SizingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SizingPolicySpec   `json:"spec"`
	Status            SizingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SizingPolicyList contains a list of SizingPolicys
type SizingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SizingPolicy `json:"items"`
}

// Repository type metadata.
var (
	SizingPolicy_Kind             = "SizingPolicy"
	SizingPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SizingPolicy_Kind}.String()
	SizingPolicy_KindAPIVersion   = SizingPolicy_Kind + "." + CRDGroupVersion.String()
	SizingPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SizingPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SizingPolicy{}, &SizingPolicyList{})
}
