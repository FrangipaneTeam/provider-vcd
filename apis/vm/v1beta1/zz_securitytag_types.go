/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityTagObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityTagParameters struct {

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// List of VM IDs that the security tag is going to be applied to.
	// List of VM IDs that the security tags is going to be tied to
	// +crossplane:generate:reference:type=github.com/FrangipaneTeam/provider-vcd/apis/vm/v1beta1.VM
	// +kubebuilder:validation:Optional
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`

	// References to VM in vm to populate vmIds.
	// +kubebuilder:validation:Optional
	VMIdsRefs []v1.Reference `json:"vmIdsRefs,omitempty" tf:"-"`

	// Selector for a list of VM in vm to populate vmIds.
	// +kubebuilder:validation:Optional
	VMIdsSelector *v1.Selector `json:"vmIdsSelector,omitempty" tf:"-"`
}

// SecurityTagSpec defines the desired state of SecurityTag
type SecurityTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityTagParameters `json:"forProvider"`
}

// SecurityTagStatus defines the observed state of SecurityTag.
type SecurityTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityTag is the Schema for the SecurityTags API. Provides a VMware Cloud Director Security Tag resource. This can be used to assign security tag to VMs.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type SecurityTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityTagSpec   `json:"spec"`
	Status            SecurityTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityTagList contains a list of SecurityTags
type SecurityTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityTag `json:"items"`
}

// Repository type metadata.
var (
	SecurityTag_Kind             = "SecurityTag"
	SecurityTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityTag_Kind}.String()
	SecurityTag_KindAPIVersion   = SecurityTag_Kind + "." + CRDGroupVersion.String()
	SecurityTag_GroupVersionKind = CRDGroupVersion.WithKind(SecurityTag_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityTag{}, &SecurityTagList{})
}
