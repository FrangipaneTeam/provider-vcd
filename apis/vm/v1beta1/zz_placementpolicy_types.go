/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PlacementPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PlacementPolicyParameters struct {

	// description of VM Placement Policy.
	// Description of the VM Placement Policy
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IDs of one or more Logical VM Groups to define this VM Placement policy. There is an AND relationship among all the entries set in this attribute. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the entries set in this attribute
	// +kubebuilder:validation:Optional
	LogicalVMGroupIds []*string `json:"logicalVmGroupIds,omitempty" tf:"logical_vm_group_ids,omitempty"`

	// The ID of the Provider VDC to which this VM Placement Policy belongs.
	// ID of the Provider VDC to which the VM Placement Policy belongs
	// +kubebuilder:validation:Required
	ProviderVdcID *string `json:"providerVdcId" tf:"provider_vdc_id,omitempty"`

	// IDs of the collection of VMs with similar host requirements. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of the collection of VMs with similar host requirements
	// +kubebuilder:validation:Optional
	VMGroupIds []*string `json:"vmGroupIds,omitempty" tf:"vm_group_ids,omitempty"`
}

// PlacementPolicySpec defines the desired state of PlacementPolicy
type PlacementPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PlacementPolicyParameters `json:"forProvider"`
}

// PlacementPolicyStatus defines the observed state of PlacementPolicy.
type PlacementPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PlacementPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PlacementPolicy is the Schema for the PlacementPolicys API. Provides a VMware Cloud Director VM Placement Policy resource. This can be used to create, modify, and delete VM Placement Policies.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type PlacementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PlacementPolicySpec   `json:"spec"`
	Status            PlacementPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlacementPolicyList contains a list of PlacementPolicys
type PlacementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PlacementPolicy `json:"items"`
}

// Repository type metadata.
var (
	PlacementPolicy_Kind             = "PlacementPolicy"
	PlacementPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PlacementPolicy_Kind}.String()
	PlacementPolicy_KindAPIVersion   = PlacementPolicy_Kind + "." + CRDGroupVersion.String()
	PlacementPolicy_GroupVersionKind = CRDGroupVersion.WithKind(PlacementPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&PlacementPolicy{}, &PlacementPolicyList{})
}
