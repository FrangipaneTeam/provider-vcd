/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InternalDiskObservation_2 struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether the disk storage is pre-allocated or allocated on demand.
	// Specifies whether the disk storage is pre-allocated or allocated on demand.
	ThinProvisioned *bool `json:"thinProvisioned,omitempty" tf:"thin_provisioned,omitempty"`
}

type InternalDiskParameters_2 struct {

	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail. Defaults to false.
	// Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
	// +kubebuilder:validation:Optional
	AllowVMReboot *bool `json:"allowVmReboot,omitempty" tf:"allow_vm_reboot,omitempty"`

	// The number of the SCSI or IDE controller itself.
	// The number of the SCSI or IDE controller itself.
	// +kubebuilder:validation:Required
	BusNumber *float64 `json:"busNumber" tf:"bus_number,omitempty"`

	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
	// sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.4.0+ and
	// VCD 10.2.1+
	// The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme
	// +kubebuilder:validation:Required
	BusType *string `json:"busType" tf:"bus_type,omitempty"`

	// Specifies the IOPS for the disk. Default is 0.
	// Specifies the IOPS for the disk.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The size of the disk in MB.
	// The size of the disk in MB.
	// +kubebuilder:validation:Required
	SizeInMb *float64 `json:"sizeInMb" tf:"size_in_mb,omitempty"`

	// Storage profile which overrides the VM default one.
	// Storage profile to override the VM default one
	// +kubebuilder:validation:Optional
	StorageProfile *string `json:"storageProfile,omitempty" tf:"storage_profile,omitempty"`

	// The device number on the SCSI or IDE controller of the disk.
	// The device number on the SCSI or IDE controller of the disk.
	// +kubebuilder:validation:Required
	UnitNumber *float64 `json:"unitNumber" tf:"unit_number,omitempty"`

	// VM in vAPP in which internal disk is created.
	// VM in vApp in which internal disk is created
	// +kubebuilder:validation:Required
	VMName *string `json:"vmName" tf:"vm_name,omitempty"`

	// The vAPP this VM internal disk belongs to.
	// The vApp this VM internal disk belongs to
	// +kubebuilder:validation:Required
	VappName *string `json:"vappName" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// InternalDiskSpec defines the desired state of InternalDisk
type InternalDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InternalDiskParameters_2 `json:"forProvider"`
}

// InternalDiskStatus defines the observed state of InternalDisk.
type InternalDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InternalDiskObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InternalDisk is the Schema for the InternalDisks API. Provides a VMware Cloud Director VM internal disk resource. This can be used to create and delete VM internal disks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type InternalDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InternalDiskSpec   `json:"spec"`
	Status            InternalDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InternalDiskList contains a list of InternalDisks
type InternalDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InternalDisk `json:"items"`
}

// Repository type metadata.
var (
	InternalDisk_Kind             = "InternalDisk"
	InternalDisk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InternalDisk_Kind}.String()
	InternalDisk_KindAPIVersion   = InternalDisk_Kind + "." + CRDGroupVersion.String()
	InternalDisk_GroupVersionKind = CRDGroupVersion.WithKind(InternalDisk_Kind)
)

func init() {
	SchemeBuilder.Register(&InternalDisk{}, &InternalDiskList{})
}
